# coding: utf-8

"""
    YNAB API Endpoints

    Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: rienafairefr@gmail.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class HybridTransaction(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_id': 'str',
        'amount': 'int',
        'approved': 'bool',
        'category_id': 'str',
        'cleared': 'str',
        'date': 'date',
        'deleted': 'bool',
        'flag_color': 'str',
        'id': 'str',
        'import_id': 'str',
        'matched_transaction_id': 'str',
        'memo': 'str',
        'payee_id': 'str',
        'transfer_account_id': 'str',
        'transfer_transaction_id': 'str',
        'account_name': 'str',
        'category_name': 'str',
        'parent_transaction_id': 'str',
        'payee_name': 'str',
        'type': 'str'
    }

    attribute_map = {
        'account_id': 'account_id',
        'amount': 'amount',
        'approved': 'approved',
        'category_id': 'category_id',
        'cleared': 'cleared',
        'date': 'date',
        'deleted': 'deleted',
        'flag_color': 'flag_color',
        'id': 'id',
        'import_id': 'import_id',
        'matched_transaction_id': 'matched_transaction_id',
        'memo': 'memo',
        'payee_id': 'payee_id',
        'transfer_account_id': 'transfer_account_id',
        'transfer_transaction_id': 'transfer_transaction_id',
        'account_name': 'account_name',
        'category_name': 'category_name',
        'parent_transaction_id': 'parent_transaction_id',
        'payee_name': 'payee_name',
        'type': 'type'
    }

    def __init__(self, account_id=None, amount=None, approved=None, category_id=None, cleared=None, date=None, deleted=None, flag_color=None, id=None, import_id=None, matched_transaction_id=None, memo=None, payee_id=None, transfer_account_id=None, transfer_transaction_id=None, account_name=None, category_name=None, parent_transaction_id=None, payee_name=None, type=None):  # noqa: E501
        """HybridTransaction - a model defined in OpenAPI"""  # noqa: E501

        self._account_id = None
        self._amount = None
        self._approved = None
        self._category_id = None
        self._cleared = None
        self._date = None
        self._deleted = None
        self._flag_color = None
        self._id = None
        self._import_id = None
        self._matched_transaction_id = None
        self._memo = None
        self._payee_id = None
        self._transfer_account_id = None
        self._transfer_transaction_id = None
        self._account_name = None
        self._category_name = None
        self._parent_transaction_id = None
        self._payee_name = None
        self._type = None
        self.discriminator = None

        self.account_id = account_id
        self.amount = amount
        self.approved = approved
        self.category_id = category_id
        self.cleared = cleared
        self.date = date
        self.deleted = deleted
        self.flag_color = flag_color
        self.id = id
        self.import_id = import_id
        self.matched_transaction_id = matched_transaction_id
        self.memo = memo
        self.payee_id = payee_id
        self.transfer_account_id = transfer_account_id
        self.transfer_transaction_id = transfer_transaction_id
        self.account_name = account_name
        if category_name is not None:
            self.category_name = category_name
        if parent_transaction_id is not None:
            self.parent_transaction_id = parent_transaction_id
        if payee_name is not None:
            self.payee_name = payee_name
        self.type = type

    @property
    def account_id(self):
        """Gets the account_id of this HybridTransaction.  # noqa: E501


        :return: The account_id of this HybridTransaction.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this HybridTransaction.


        :param account_id: The account_id of this HybridTransaction.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def amount(self):
        """Gets the amount of this HybridTransaction.  # noqa: E501

        The transaction amount in milliunits format  # noqa: E501

        :return: The amount of this HybridTransaction.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this HybridTransaction.

        The transaction amount in milliunits format  # noqa: E501

        :param amount: The amount of this HybridTransaction.  # noqa: E501
        :type: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def approved(self):
        """Gets the approved of this HybridTransaction.  # noqa: E501

        Whether or not the transaction is approved  # noqa: E501

        :return: The approved of this HybridTransaction.  # noqa: E501
        :rtype: bool
        """
        return self._approved

    @approved.setter
    def approved(self, approved):
        """Sets the approved of this HybridTransaction.

        Whether or not the transaction is approved  # noqa: E501

        :param approved: The approved of this HybridTransaction.  # noqa: E501
        :type: bool
        """
        if approved is None:
            raise ValueError("Invalid value for `approved`, must not be `None`")  # noqa: E501

        self._approved = approved

    @property
    def category_id(self):
        """Gets the category_id of this HybridTransaction.  # noqa: E501


        :return: The category_id of this HybridTransaction.  # noqa: E501
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this HybridTransaction.


        :param category_id: The category_id of this HybridTransaction.  # noqa: E501
        :type: str
        """

        self._category_id = category_id

    @property
    def cleared(self):
        """Gets the cleared of this HybridTransaction.  # noqa: E501

        The cleared status of the transaction  # noqa: E501

        :return: The cleared of this HybridTransaction.  # noqa: E501
        :rtype: str
        """
        return self._cleared

    @cleared.setter
    def cleared(self, cleared):
        """Sets the cleared of this HybridTransaction.

        The cleared status of the transaction  # noqa: E501

        :param cleared: The cleared of this HybridTransaction.  # noqa: E501
        :type: str
        """
        if cleared is None:
            raise ValueError("Invalid value for `cleared`, must not be `None`")  # noqa: E501
        allowed_values = ["cleared", "uncleared", "reconciled"]  # noqa: E501
        if cleared not in allowed_values:
            raise ValueError(
                "Invalid value for `cleared` ({0}), must be one of {1}"  # noqa: E501
                .format(cleared, allowed_values)
            )

        self._cleared = cleared

    @property
    def date(self):
        """Gets the date of this HybridTransaction.  # noqa: E501

        The transaction date in ISO format (e.g. 2016-12-01)  # noqa: E501

        :return: The date of this HybridTransaction.  # noqa: E501
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this HybridTransaction.

        The transaction date in ISO format (e.g. 2016-12-01)  # noqa: E501

        :param date: The date of this HybridTransaction.  # noqa: E501
        :type: date
        """
        if date is None:
            raise ValueError("Invalid value for `date`, must not be `None`")  # noqa: E501

        self._date = date

    @property
    def deleted(self):
        """Gets the deleted of this HybridTransaction.  # noqa: E501

        Whether or not the transaction has been deleted.  Deleted transactions will only be included in delta requests.  # noqa: E501

        :return: The deleted of this HybridTransaction.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this HybridTransaction.

        Whether or not the transaction has been deleted.  Deleted transactions will only be included in delta requests.  # noqa: E501

        :param deleted: The deleted of this HybridTransaction.  # noqa: E501
        :type: bool
        """
        if deleted is None:
            raise ValueError("Invalid value for `deleted`, must not be `None`")  # noqa: E501

        self._deleted = deleted

    @property
    def flag_color(self):
        """Gets the flag_color of this HybridTransaction.  # noqa: E501

        The transaction flag  # noqa: E501

        :return: The flag_color of this HybridTransaction.  # noqa: E501
        :rtype: str
        """
        return self._flag_color

    @flag_color.setter
    def flag_color(self, flag_color):
        """Sets the flag_color of this HybridTransaction.

        The transaction flag  # noqa: E501

        :param flag_color: The flag_color of this HybridTransaction.  # noqa: E501
        :type: str
        """

        self._flag_color = flag_color

    @property
    def id(self):
        """Gets the id of this HybridTransaction.  # noqa: E501


        :return: The id of this HybridTransaction.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HybridTransaction.


        :param id: The id of this HybridTransaction.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def import_id(self):
        """Gets the import_id of this HybridTransaction.  # noqa: E501

        If the Transaction was imported, this field is a unique (by account) import identifier.  If this transaction was imported through File Based Import or Direct Import and not through the API, the import_id will have the format: 'YNAB:[milliunit_amount]:[iso_date]:[occurrence]'.  For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of 'YNAB:-294230:2015-12-30:1'.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be 'YNAB:-294230:2015-12-30:2'.  # noqa: E501

        :return: The import_id of this HybridTransaction.  # noqa: E501
        :rtype: str
        """
        return self._import_id

    @import_id.setter
    def import_id(self, import_id):
        """Sets the import_id of this HybridTransaction.

        If the Transaction was imported, this field is a unique (by account) import identifier.  If this transaction was imported through File Based Import or Direct Import and not through the API, the import_id will have the format: 'YNAB:[milliunit_amount]:[iso_date]:[occurrence]'.  For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of 'YNAB:-294230:2015-12-30:1'.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be 'YNAB:-294230:2015-12-30:2'.  # noqa: E501

        :param import_id: The import_id of this HybridTransaction.  # noqa: E501
        :type: str
        """

        self._import_id = import_id

    @property
    def matched_transaction_id(self):
        """Gets the matched_transaction_id of this HybridTransaction.  # noqa: E501

        If transaction is matched, the id of the matched transaction  # noqa: E501

        :return: The matched_transaction_id of this HybridTransaction.  # noqa: E501
        :rtype: str
        """
        return self._matched_transaction_id

    @matched_transaction_id.setter
    def matched_transaction_id(self, matched_transaction_id):
        """Sets the matched_transaction_id of this HybridTransaction.

        If transaction is matched, the id of the matched transaction  # noqa: E501

        :param matched_transaction_id: The matched_transaction_id of this HybridTransaction.  # noqa: E501
        :type: str
        """

        self._matched_transaction_id = matched_transaction_id

    @property
    def memo(self):
        """Gets the memo of this HybridTransaction.  # noqa: E501


        :return: The memo of this HybridTransaction.  # noqa: E501
        :rtype: str
        """
        return self._memo

    @memo.setter
    def memo(self, memo):
        """Sets the memo of this HybridTransaction.


        :param memo: The memo of this HybridTransaction.  # noqa: E501
        :type: str
        """

        self._memo = memo

    @property
    def payee_id(self):
        """Gets the payee_id of this HybridTransaction.  # noqa: E501


        :return: The payee_id of this HybridTransaction.  # noqa: E501
        :rtype: str
        """
        return self._payee_id

    @payee_id.setter
    def payee_id(self, payee_id):
        """Sets the payee_id of this HybridTransaction.


        :param payee_id: The payee_id of this HybridTransaction.  # noqa: E501
        :type: str
        """

        self._payee_id = payee_id

    @property
    def transfer_account_id(self):
        """Gets the transfer_account_id of this HybridTransaction.  # noqa: E501

        If a transfer transaction, the account to which it transfers  # noqa: E501

        :return: The transfer_account_id of this HybridTransaction.  # noqa: E501
        :rtype: str
        """
        return self._transfer_account_id

    @transfer_account_id.setter
    def transfer_account_id(self, transfer_account_id):
        """Sets the transfer_account_id of this HybridTransaction.

        If a transfer transaction, the account to which it transfers  # noqa: E501

        :param transfer_account_id: The transfer_account_id of this HybridTransaction.  # noqa: E501
        :type: str
        """

        self._transfer_account_id = transfer_account_id

    @property
    def transfer_transaction_id(self):
        """Gets the transfer_transaction_id of this HybridTransaction.  # noqa: E501

        If a transfer transaction, the id of transaction on the other side of the transfer  # noqa: E501

        :return: The transfer_transaction_id of this HybridTransaction.  # noqa: E501
        :rtype: str
        """
        return self._transfer_transaction_id

    @transfer_transaction_id.setter
    def transfer_transaction_id(self, transfer_transaction_id):
        """Sets the transfer_transaction_id of this HybridTransaction.

        If a transfer transaction, the id of transaction on the other side of the transfer  # noqa: E501

        :param transfer_transaction_id: The transfer_transaction_id of this HybridTransaction.  # noqa: E501
        :type: str
        """

        self._transfer_transaction_id = transfer_transaction_id

    @property
    def account_name(self):
        """Gets the account_name of this HybridTransaction.  # noqa: E501


        :return: The account_name of this HybridTransaction.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this HybridTransaction.


        :param account_name: The account_name of this HybridTransaction.  # noqa: E501
        :type: str
        """
        if account_name is None:
            raise ValueError("Invalid value for `account_name`, must not be `None`")  # noqa: E501

        self._account_name = account_name

    @property
    def category_name(self):
        """Gets the category_name of this HybridTransaction.  # noqa: E501


        :return: The category_name of this HybridTransaction.  # noqa: E501
        :rtype: str
        """
        return self._category_name

    @category_name.setter
    def category_name(self, category_name):
        """Sets the category_name of this HybridTransaction.


        :param category_name: The category_name of this HybridTransaction.  # noqa: E501
        :type: str
        """

        self._category_name = category_name

    @property
    def parent_transaction_id(self):
        """Gets the parent_transaction_id of this HybridTransaction.  # noqa: E501

        For subtransaction types, this is the id of the parent transaction.  For transaction types, this id will be always be null.  # noqa: E501

        :return: The parent_transaction_id of this HybridTransaction.  # noqa: E501
        :rtype: str
        """
        return self._parent_transaction_id

    @parent_transaction_id.setter
    def parent_transaction_id(self, parent_transaction_id):
        """Sets the parent_transaction_id of this HybridTransaction.

        For subtransaction types, this is the id of the parent transaction.  For transaction types, this id will be always be null.  # noqa: E501

        :param parent_transaction_id: The parent_transaction_id of this HybridTransaction.  # noqa: E501
        :type: str
        """

        self._parent_transaction_id = parent_transaction_id

    @property
    def payee_name(self):
        """Gets the payee_name of this HybridTransaction.  # noqa: E501


        :return: The payee_name of this HybridTransaction.  # noqa: E501
        :rtype: str
        """
        return self._payee_name

    @payee_name.setter
    def payee_name(self, payee_name):
        """Sets the payee_name of this HybridTransaction.


        :param payee_name: The payee_name of this HybridTransaction.  # noqa: E501
        :type: str
        """

        self._payee_name = payee_name

    @property
    def type(self):
        """Gets the type of this HybridTransaction.  # noqa: E501

        Whether the hybrid transaction represents a regular transaction or a subtransaction  # noqa: E501

        :return: The type of this HybridTransaction.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HybridTransaction.

        Whether the hybrid transaction represents a regular transaction or a subtransaction  # noqa: E501

        :param type: The type of this HybridTransaction.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["transaction", "subtransaction"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HybridTransaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
