Metadata-Version: 2.1
Name: dax
Version: 1.5.0
Summary: Distributed Automation for XNAT
Home-page: http://github.com/VUIIS/dax
Author: VUIIS CCI
Author-email: vuiis-cci@googlegroups.com
Maintainer: VUIIS CCI
Maintainer-email: vuiis-cci@googlegroups.com
License: MIT
Download-URL: http://github.com/VUIIS/dax
Platform: MacOs
Platform: Linux
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Console
Classifier: Intended Audience :: Science/Research
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Operating System :: POSIX
Classifier: Operating System :: POSIX :: Linux
Classifier: Operating System :: Unix
Classifier: Programming Language :: Python :: 3.7
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Scientific/Engineering :: Information Analysis
Requires-Python: ~=3.6
Requires-Dist: Sphinx (>=1.4)
Requires-Dist: pyxnat (>=1.1.0.2)
Requires-Dist: pyyaml
Requires-Dist: pycap
Requires-Dist: configparser
Requires-Dist: nibabel


========================================================
DAX: Distributed Automation for XNAT
========================================================

*DAX*, is  a python package developed at Vanderbilt University, Nashville, TN,
USA. It's available on github at the address: https://github.com/VUIIS/dax.
See the different tutorials bellow to learn more about this package and how
to use it.

XNAT gives an incredible flexible imaging informatics software platform to
organise, manage any imaging data. It also provides a Pipeline Engine to run
processings on your data. The pipeline engines has an important learning curve
and doesn't provide a way to run processes when your XNAT instance isn't
connected to your cluster.

*DAX*, an open-source initiative under the umbrella of Vanderbilt University
Institute of Imaging Science (VUIIS), is a Python project that provides a
uniform interface to run pipelines on a cluster by grabbing data from a XNAT
database via RESTApi Calls.

*DAX* allows you to:

* extract information from XNAT via scripts (bin/Xnat_tools/Xnat...)
* create pipelines (spiders/processors) to run pipelines on your data
* build a project on XNAT with pipelines (assessors)
* launch pipelines on your cluster and upload results back to xnat
* interact with XNAT via python using commands in XnatUtils.


