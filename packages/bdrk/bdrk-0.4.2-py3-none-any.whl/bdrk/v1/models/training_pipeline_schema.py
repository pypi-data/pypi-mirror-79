# coding: utf-8

"""
    Bedrock

    API documentation for Bedrock platform  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TrainingPipelineSchema(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict):       The key is attribute name
                                  and the value is attribute type.
      attribute_map (dict):       The key is attribute name
                                  and the value is json key in definition.
      readonly_attributes (dict): Set of readonly attributes (will not be
                                  serialised in request body).
    """
    openapi_types = {
        'config_file_path': 'str',
        'created_at': 'datetime',
        'created_by': 'UserSchema',
        'id': 'str',
        'last_model_version_id': 'str',
        'last_run_at': 'datetime',
        'last_run_id': 'str',
        'model_id': 'str',
        'name': 'str',
        'object': 'str',
        'password': 'str',
        'pipeline_name': 'str',
        'project_id': 'str',
        'ref': 'str',
        'secret_names': 'list[str]',
        'source': 'object',
        'updated_at': 'datetime',
        'uri': 'str',
        'username': 'str'
    }

    attribute_map = {
        'config_file_path': 'config_file_path',
        'created_at': 'created_at',
        'created_by': 'created_by',
        'id': 'id',
        'last_model_version_id': 'last_model_version_id',
        'last_run_at': 'last_run_at',
        'last_run_id': 'last_run_id',
        'model_id': 'model_id',
        'name': 'name',
        'object': 'object',
        'password': 'password',
        'pipeline_name': 'pipeline_name',
        'project_id': 'project_id',
        'ref': 'ref',
        'secret_names': 'secret_names',
        'source': 'source',
        'updated_at': 'updated_at',
        'uri': 'uri',
        'username': 'username'
    }

    readonly_attributes = {
        'created_at',
        'created_by',
        'id',
        'last_model_version_id',
        'last_run_at',
        'last_run_id',
        'object',
        'project_id',
        'secret_names',
        'updated_at',
    }

    def __init__(self, config_file_path=None, created_at=None, created_by=None, id=None, last_model_version_id=None, last_run_at=None, last_run_id=None, model_id=None, name=None, object='trainingPipeline', password=None, pipeline_name=None, project_id=None, ref=None, secret_names=None, source=None, updated_at=None, uri=None, username=None, **kwargs):  # noqa: E501
        """TrainingPipelineSchema - a model defined in OpenAPI"""  # noqa: E501

        self._config_file_path = None
        self._created_at = None
        self._created_by = None
        self._id = None
        self._last_model_version_id = None
        self._last_run_at = None
        self._last_run_id = None
        self._model_id = None
        self._name = None
        self._object = None
        self._password = None
        self._pipeline_name = None
        self._project_id = None
        self._ref = None
        self._secret_names = None
        self._source = None
        self._updated_at = None
        self._uri = None
        self._username = None
        self.discriminator = None

        if config_file_path is not None:
            self.config_file_path = config_file_path
        self.model_id = model_id
        self.name = name
        if password is not None:
            self.password = password
        if pipeline_name is not None:
            self.pipeline_name = pipeline_name
        self.ref = ref
        if source is not None:
            self.source = source
        self.uri = uri
        if username is not None:
            self.username = username

    @classmethod
    def from_response(cls, config_file_path=None, created_at=None, created_by=None, id=None, last_model_version_id=None, last_run_at=None, last_run_id=None, model_id=None, name=None, object='trainingPipeline', password=None, pipeline_name=None, project_id=None, ref=None, secret_names=None, source=None, updated_at=None, uri=None, username=None, **kwargs):  # noqa: E501
        """Instantiate TrainingPipelineSchema from response"""  # noqa: E501
        self = cls.__new__(cls)

        self._config_file_path = None
        self._created_at = None
        self._created_by = None
        self._id = None
        self._last_model_version_id = None
        self._last_run_at = None
        self._last_run_id = None
        self._model_id = None
        self._name = None
        self._object = None
        self._password = None
        self._pipeline_name = None
        self._project_id = None
        self._ref = None
        self._secret_names = None
        self._source = None
        self._updated_at = None
        self._uri = None
        self._username = None
        self.discriminator = None

        if config_file_path is not None:
            self.config_file_path = config_file_path
        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        if id is not None:
            self.id = id
        if last_model_version_id is not None:
            self.last_model_version_id = last_model_version_id
        if last_run_at is not None:
            self.last_run_at = last_run_at
        if last_run_id is not None:
            self.last_run_id = last_run_id
        self.model_id = model_id
        if object is not None:
            self.object = object
        if pipeline_name is not None:
            self.pipeline_name = pipeline_name
        if project_id is not None:
            self.project_id = project_id
        if secret_names is not None:
            self.secret_names = secret_names
        if source is not None:
            self.source = source
        if updated_at is not None:
            self.updated_at = updated_at
        return self

    @property
    def config_file_path(self):
        """Gets the config_file_path of this TrainingPipelineSchema.  # noqa: E501


        :return: The config_file_path of this TrainingPipelineSchema.  # noqa: E501
        :rtype: str
        """
        return self._config_file_path

    @config_file_path.setter
    def config_file_path(self, config_file_path):
        """Sets the config_file_path of this TrainingPipelineSchema.


        :param config_file_path: The config_file_path of this TrainingPipelineSchema.  # noqa: E501
        :type: str
        """
        if config_file_path is not None and len(config_file_path) > 1000:
            raise ValueError("Invalid value for `config_file_path`, length must be less than or equal to `1000`")  # noqa: E501
        if config_file_path is not None and len(config_file_path) < 1:
            raise ValueError("Invalid value for `config_file_path`, length must be greater than or equal to `1`")  # noqa: E501

        self._config_file_path = config_file_path

    @property
    def created_at(self):
        """Gets the created_at of this TrainingPipelineSchema.  # noqa: E501


        :return: The created_at of this TrainingPipelineSchema.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TrainingPipelineSchema.


        :param created_at: The created_at of this TrainingPipelineSchema.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this TrainingPipelineSchema.  # noqa: E501


        :return: The created_by of this TrainingPipelineSchema.  # noqa: E501
        :rtype: UserSchema
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this TrainingPipelineSchema.


        :param created_by: The created_by of this TrainingPipelineSchema.  # noqa: E501
        :type: UserSchema
        """

        self._created_by = created_by

    @property
    def id(self):
        """Gets the id of this TrainingPipelineSchema.  # noqa: E501


        :return: The id of this TrainingPipelineSchema.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TrainingPipelineSchema.


        :param id: The id of this TrainingPipelineSchema.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def last_model_version_id(self):
        """Gets the last_model_version_id of this TrainingPipelineSchema.  # noqa: E501


        :return: The last_model_version_id of this TrainingPipelineSchema.  # noqa: E501
        :rtype: str
        """
        return self._last_model_version_id

    @last_model_version_id.setter
    def last_model_version_id(self, last_model_version_id):
        """Sets the last_model_version_id of this TrainingPipelineSchema.


        :param last_model_version_id: The last_model_version_id of this TrainingPipelineSchema.  # noqa: E501
        :type: str
        """

        self._last_model_version_id = last_model_version_id

    @property
    def last_run_at(self):
        """Gets the last_run_at of this TrainingPipelineSchema.  # noqa: E501


        :return: The last_run_at of this TrainingPipelineSchema.  # noqa: E501
        :rtype: datetime
        """
        return self._last_run_at

    @last_run_at.setter
    def last_run_at(self, last_run_at):
        """Sets the last_run_at of this TrainingPipelineSchema.


        :param last_run_at: The last_run_at of this TrainingPipelineSchema.  # noqa: E501
        :type: datetime
        """

        self._last_run_at = last_run_at

    @property
    def last_run_id(self):
        """Gets the last_run_id of this TrainingPipelineSchema.  # noqa: E501


        :return: The last_run_id of this TrainingPipelineSchema.  # noqa: E501
        :rtype: str
        """
        return self._last_run_id

    @last_run_id.setter
    def last_run_id(self, last_run_id):
        """Sets the last_run_id of this TrainingPipelineSchema.


        :param last_run_id: The last_run_id of this TrainingPipelineSchema.  # noqa: E501
        :type: str
        """

        self._last_run_id = last_run_id

    @property
    def model_id(self):
        """Gets the model_id of this TrainingPipelineSchema.  # noqa: E501


        :return: The model_id of this TrainingPipelineSchema.  # noqa: E501
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this TrainingPipelineSchema.


        :param model_id: The model_id of this TrainingPipelineSchema.  # noqa: E501
        :type: str
        """
        if model_id is None:
            raise ValueError("Invalid value for `model_id`, must not be `None`")  # noqa: E501
        if model_id is not None and len(model_id) < 1:
            raise ValueError("Invalid value for `model_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._model_id = model_id

    @property
    def name(self):
        """Gets the name of this TrainingPipelineSchema.  # noqa: E501


        :return: The name of this TrainingPipelineSchema.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TrainingPipelineSchema.


        :param name: The name of this TrainingPipelineSchema.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def object(self):
        """Gets the object of this TrainingPipelineSchema.  # noqa: E501


        :return: The object of this TrainingPipelineSchema.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this TrainingPipelineSchema.


        :param object: The object of this TrainingPipelineSchema.  # noqa: E501
        :type: str
        """

        self._object = object

    @property
    def password(self):
        """Gets the password of this TrainingPipelineSchema.  # noqa: E501


        :return: The password of this TrainingPipelineSchema.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this TrainingPipelineSchema.


        :param password: The password of this TrainingPipelineSchema.  # noqa: E501
        :type: str
        """
        if password is not None and len(password) > 1000:
            raise ValueError("Invalid value for `password`, length must be less than or equal to `1000`")  # noqa: E501
        if password is not None and len(password) < 1:
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `1`")  # noqa: E501

        self._password = password

    @property
    def pipeline_name(self):
        """Gets the pipeline_name of this TrainingPipelineSchema.  # noqa: E501


        :return: The pipeline_name of this TrainingPipelineSchema.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_name

    @pipeline_name.setter
    def pipeline_name(self, pipeline_name):
        """Sets the pipeline_name of this TrainingPipelineSchema.


        :param pipeline_name: The pipeline_name of this TrainingPipelineSchema.  # noqa: E501
        :type: str
        """

        self._pipeline_name = pipeline_name

    @property
    def project_id(self):
        """Gets the project_id of this TrainingPipelineSchema.  # noqa: E501


        :return: The project_id of this TrainingPipelineSchema.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this TrainingPipelineSchema.


        :param project_id: The project_id of this TrainingPipelineSchema.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def ref(self):
        """Gets the ref of this TrainingPipelineSchema.  # noqa: E501


        :return: The ref of this TrainingPipelineSchema.  # noqa: E501
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this TrainingPipelineSchema.


        :param ref: The ref of this TrainingPipelineSchema.  # noqa: E501
        :type: str
        """
        if ref is None:
            raise ValueError("Invalid value for `ref`, must not be `None`")  # noqa: E501
        if ref is not None and len(ref) > 1000:
            raise ValueError("Invalid value for `ref`, length must be less than or equal to `1000`")  # noqa: E501
        if ref is not None and len(ref) < 1:
            raise ValueError("Invalid value for `ref`, length must be greater than or equal to `1`")  # noqa: E501

        self._ref = ref

    @property
    def secret_names(self):
        """Gets the secret_names of this TrainingPipelineSchema.  # noqa: E501


        :return: The secret_names of this TrainingPipelineSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._secret_names

    @secret_names.setter
    def secret_names(self, secret_names):
        """Sets the secret_names of this TrainingPipelineSchema.


        :param secret_names: The secret_names of this TrainingPipelineSchema.  # noqa: E501
        :type: list[str]
        """

        self._secret_names = secret_names

    @property
    def source(self):
        """Gets the source of this TrainingPipelineSchema.  # noqa: E501


        :return: The source of this TrainingPipelineSchema.  # noqa: E501
        :rtype: object
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this TrainingPipelineSchema.


        :param source: The source of this TrainingPipelineSchema.  # noqa: E501
        :type: object
        """

        self._source = source

    @property
    def updated_at(self):
        """Gets the updated_at of this TrainingPipelineSchema.  # noqa: E501


        :return: The updated_at of this TrainingPipelineSchema.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TrainingPipelineSchema.


        :param updated_at: The updated_at of this TrainingPipelineSchema.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def uri(self):
        """Gets the uri of this TrainingPipelineSchema.  # noqa: E501


        :return: The uri of this TrainingPipelineSchema.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this TrainingPipelineSchema.


        :param uri: The uri of this TrainingPipelineSchema.  # noqa: E501
        :type: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501
        if uri is not None and len(uri) > 1000:
            raise ValueError("Invalid value for `uri`, length must be less than or equal to `1000`")  # noqa: E501
        if uri is not None and len(uri) < 1:
            raise ValueError("Invalid value for `uri`, length must be greater than or equal to `1`")  # noqa: E501

        self._uri = uri

    @property
    def username(self):
        """Gets the username of this TrainingPipelineSchema.  # noqa: E501


        :return: The username of this TrainingPipelineSchema.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this TrainingPipelineSchema.


        :param username: The username of this TrainingPipelineSchema.  # noqa: E501
        :type: str
        """
        if username is not None and len(username) > 1000:
            raise ValueError("Invalid value for `username`, length must be less than or equal to `1000`")  # noqa: E501
        if username is not None and len(username) < 1:
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `1`")  # noqa: E501

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrainingPipelineSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
