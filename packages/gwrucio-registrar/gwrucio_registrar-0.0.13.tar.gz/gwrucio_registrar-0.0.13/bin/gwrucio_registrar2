#!/usr/bin/env python
#
# Copyright (C) 2018  James Alexander Clark <james.clark@ligo.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
"""
Command line tool to register LIGO/Virgo datasets into rucio.

Data may be registered as individual files, ascii lists of files, or registered
on the fly as a background process monitoring a DiskCacheFile.

This is a second generation version.
"""

# pylint: disable=import-error

import sys
import argparse
import configparser
import argcomplete

from gwrucio.registrar import run, stop


def parse_inputs():
    """
    Command line parser
    """

    aparser = argparse.ArgumentParser(description=__doc__)

    aparser.add_argument(dest="config",
                         nargs=1,
                         help="""Python configuration file for
                               registration""")

    aparser.add_argument('-r',
                         "--rse",
                         type=str,
                         required=True,
                         help="""RSE to register replicas at""")

    aparser.add_argument('-c',
                         "--diskcache-dump",
                         type=str,
                         default=None,
                         required=True,
                         help="""Path to diskcache ascii dump""")

    aparser.add_argument('-s',
                         "--gps-start-time",
                         type=int,
                         required=False,
                         help="""GPS start time to register files from
                         (overrides values in config file)""")

    aparser.add_argument('-e',
                         "--gps-end-time",
                         type=int,
                         required=False,
                         help="""GPS end time to register files from
                         (overrides values in config file)""")

    aparser.add_argument('-t',
                         "--threads",
                         type=int,
                         default=1,
                         help="""Number of worker threads""")

    aparser.add_argument('-x',
                         "--reduce-list",
                         default=False,
                         action="store_true",
                         help="""Decimate file list before computing
                         metadata""")

    aparser.add_argument("--dry-run",
                         default=False,
                         action="store_true",
                         help="""Find files, construct replica list but don't
                         actually upload to rucio""")

    argcomplete.autocomplete(aparser)

    aparser = aparser.parse_args(sys.argv[1:])

    # Parse configfile
    cparser = configparser.ConfigParser()
    cparser.optionxform = str
    cparser.read(aparser.config)

    # Override with command line values
    if aparser.gps_start_time:
        cparser.set('data', 'gps-start-time', aparser.gps_start_time)
    if aparser.gps_end_time:
        cparser.set('data', 'gps-end-time', aparser.gps_end_time)

    return aparser, cparser


if __name__ == "__main__":

    # Parse input
    ARGS, CONFIG = parse_inputs()

    try:
        run(diskcache_dump=ARGS.diskcache_dump, config=CONFIG, rse=ARGS.rse,
            reduce_replicas=ARGS.reduce_list, threads=ARGS.threads)
    except KeyboardInterrupt:
        stop()
