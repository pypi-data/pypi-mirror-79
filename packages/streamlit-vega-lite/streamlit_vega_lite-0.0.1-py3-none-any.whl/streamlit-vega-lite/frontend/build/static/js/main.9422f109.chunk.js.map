{"version":3,"sources":["arrow-loader.ts","VegaLiteComponent.tsx","index.tsx"],"names":["RowIndex","Symbol","arrow","table","proxy","fields","schema","map","d","name","proto","forEach","index","column","getColumnAt","hasOwnProperty","Object","defineProperty","get","this","set","Error","enumerable","i","r","create","rowProxy","rows","Array","length","n","handleSignals","payload","Streamlit","setComponentValue","handleNewView","view","addResizeListener","_","height","setFrameHeight","withStreamlitConnection","props","args","spec","signalListeners","useMemo","listenerMap","keys","selection","data","ArrowTable","VegaLite","onNewView","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAKMA,EAAWC,OAAO,YAGjB,SAASC,EAAMC,GAIpB,IAHA,IAAMC,EAUR,SAAkBD,GAChB,IAAME,EAASF,EAAMG,OAAOD,OAAOE,KAAI,SAACC,GAAD,OAAOA,EAAEC,QAC1CC,EAAQ,GAmBd,OAjBAL,EAAOM,SAAQ,SAACF,EAAMG,GACpB,IAAMC,EAASV,EAAMW,YAAYF,GAG7BF,EAAMK,eAAeN,IAEzBO,OAAOC,eAAeP,EAAOD,EAAM,CACjCS,IAAK,WACH,cAAOL,QAAP,IAAOA,OAAP,EAAOA,EAAQK,IAAIC,KAAKnB,KAE1BoB,IAAK,WACH,MAAMC,MAAM,+CAEdC,YAAY,OAIT,SAACC,GACN,IAAMC,EAAIR,OAAOS,OAAOf,GAExB,OADAc,EAAExB,GAAYuB,EACPC,GAlCKE,CAASvB,GACjBwB,EAAOC,MAAMzB,EAAM0B,QAEhBN,EAAI,EAAGO,EAAIH,EAAKE,OAAQN,EAAIO,IAAKP,EACxCI,EAAKJ,GAAKnB,EAAMmB,GAGlB,OAAOI,ECGT,SAASI,EAActB,EAAcuB,GACnCC,IAAUC,kBAAV,aACEzB,QACGuB,IAIP,SAASG,EAAcC,GACrBA,EAAKC,mBAAkB,SAACC,EAAGC,GACzBN,IAAUO,eAAeD,MAI7B,IAmCeE,eAnC6C,SAACC,GAAW,IAAD,EAC3CA,EAAMC,KAAxBC,EAD6D,EAC7DA,KAASD,EADoD,wBAG/DE,EAAkBC,mBAAQ,WAC9B,IAAMC,EAA8C,GAEpD,GAAI,cAAeH,EACjB,cAA4B5B,OAAOgC,KAAKJ,EAAKK,WAA7C,eAA0D,CACxDF,EADsB,MACOhB,EAIjC,OAAOgB,IACN,CAACH,IAEEM,EAAOJ,mBAAQ,WAEnB,IADA,IAAMI,EAA4B,GAClC,MAAmBlC,OAAOgC,KAAP,OAAYL,QAAZ,IAAYA,IAAQ,IAAvC,eAA4C,CAAvC,IAAMlC,EAAI,KACPN,EAAQwC,EAAKlC,GACnByC,EAAKzC,GAAQN,aAAiBgD,IAAajD,EAAMC,EAAMA,OAASA,EAGlE,OAAO+C,IACN,CAACP,IAEJ,OACE,kBAACS,EAAA,EAAD,CACEF,KAAMA,EACNN,KAAMA,EACNC,gBAAiBA,EACjBQ,UAAWlB,OCzDjBmB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.9422f109.chunk.js","sourcesContent":["// Forked from vega-arrow-loader for debugging/type safety/simplified type signature\n// https://github.com/vega/vega-loader-arrow/blob/master/src/arrow.js\n\nimport { Table } from \"apache-arrow\";\n\nconst RowIndex = Symbol(\"rowIndex\");\n\n// Convert arrow table to an array of proxy objects\nexport function arrow(table: Table) {\n  const proxy = rowProxy(table);\n  const rows = Array(table.length);\n\n  for (let i = 0, n = rows.length; i < n; ++i) {\n    rows[i] = proxy(i);\n  }\n\n  return rows;\n}\n\nfunction rowProxy(table: Table) {\n  const fields = table.schema.fields.map((d) => d.name);\n  const proto = {};\n\n  fields.forEach((name, index) => {\n    const column = table.getColumnAt(index); // warning- can this be null?\n\n    // skip columns with duplicate names\n    if (proto.hasOwnProperty(name)) return;\n\n    Object.defineProperty(proto, name, {\n      get: function () {\n        return column?.get(this[RowIndex]);\n      },\n      set: function () {\n        throw Error(\"Arrow field values can not be overwritten.\");\n      },\n      enumerable: true,\n    });\n  });\n\n  return (i: number) => {\n    const r = Object.create(proto);\n    r[RowIndex] = i;\n    return r;\n  };\n}\n","import React, { useMemo } from \"react\";\nimport { SignalListener, VegaLite, View } from \"react-vega\";\nimport {\n  ArrowTable,\n  Streamlit,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\";\nimport { TopLevelSpec } from \"vega-lite\";\nimport { arrow } from \"./arrow-loader\";\n\ninterface Args {\n  spec: TopLevelSpec;\n  [name: string]: any;\n}\n\ninterface VegaLiteComponentProps {\n  args: Args;\n}\n\nfunction handleSignals(name: string, payload: any) {\n  Streamlit.setComponentValue({\n    name,\n    ...payload,\n  });\n}\n\nfunction handleNewView(view: View) {\n  view.addResizeListener((_, height) => {\n    Streamlit.setFrameHeight(height);\n  });\n}\n\nconst VegaLiteComponent: React.FC<VegaLiteComponentProps> = (props) => {\n  const { spec, ...args } = props.args;\n\n  const signalListeners = useMemo(() => {\n    const listenerMap: Record<string, SignalListener> = {};\n\n    if (\"selection\" in spec) {\n      for (const selectionName of Object.keys(spec.selection!)) {\n        listenerMap[selectionName] = handleSignals;\n      }\n    }\n\n    return listenerMap;\n  }, [spec]);\n\n  const data = useMemo(() => {\n    const data: Record<string, any> = {};\n    for (const name of Object.keys(args ?? {})) {\n      const table = args[name];\n      data[name] = table instanceof ArrowTable ? arrow(table.table) : table;\n    }\n\n    return data;\n  }, [args]);\n\n  return (\n    <VegaLite\n      data={data}\n      spec={spec}\n      signalListeners={signalListeners}\n      onNewView={handleNewView}\n    />\n  );\n};\n\nexport default withStreamlitConnection(VegaLiteComponent);\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport VegaLiteComponent from \"./VegaLiteComponent\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <VegaLiteComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}