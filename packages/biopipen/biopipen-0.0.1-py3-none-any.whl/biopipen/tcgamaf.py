"""Operations on TCGA MAF file"""
from diot import Diot
from .utils import fs2name
# Next-step processing after VCF file being generated.
from . import opts, proc_factory
from .tumhet import pTMBurden # pylint: disable=unused-import

# pylint: disable=invalid-name

pGTMatAddRs = proc_factory(
    desc="Add rs id to a genotype matrix",
    config=Diot(annotate="""
    @name:
        pGTMatAddRs
    @description:
        Add rs id to a genotype matrix
    @input:
        infile: The input genotype matrix, columns are samples, rows are mutations in format:
            - `<chr>_<pos>_<ref>_<alt>` or `<chr>_<pos>_<name>_<ref>_<alt>`
            - has to be sorted by coordinates.
            - `chromsomes` have to be in order of `args.chrorder`
    @output:
        outfile: The output genotype matrix. Row names will turn into:
            - `<chr>_<pos>_<rs>_<ref>_<alt>`
    @args:
        `dbsnp`: the dbsnp vcf file used to annotation the snps.
            - assume sorted by coordinates
            - `chromsomes` have to be in order of `args.chrorder`
        `notfound`: What to used if RS id not found. Default: `NOVEL`
            - `None/Fase` to skip to record
        `exist`: What if RS id exists? Default: `keep`
            - `keep`: Keep the RS ID and skip seeking
            - `force`: Force using the RS ID being found to replace the old one.
        `chrorder`: The chromsome order. Default: `<params.chrorder>`
	"""),
    input='infile:file',
    output='outfile:file:{{i.infile | bn}}',
    lang=opts.python,
    args=Diot(
        dbsnp=opts.dbsnp_all,
        chrorder=opts.chrorder,
        notfound='NOVEL',
        exist='keep',
    )
)

pGTMat2Plink = proc_factory(
    desc='Convert a genotype matrix to plink binary files',
    config=Diot(annotate="""
    @name:
        pGTMat2Plink
    @description:
        Convert a genotype matrix to plink binary files
    @input:
        infile: The genotype matrix, probably generated by `pVcf2GTMat`
        `metafile:file`: The metadata file.
            - column names could be `['FID', 'IID', 'PID', 'MID', 'Sex', 'Pheno']`, see plink's `ped` format
            - row names are samples
    @output:
        `outdir:dir`: The output directory. Default: `{{i.infile | fn}}.plink`
    @args:
        `plink`:   The path to `plink`
        `keeptxt`: Keep the text files (.ped and .map) or not.
        chrmaps: The chromosome mappings for encoding.
        snpbed: SNPs in BED format giving the coordinates
            - If not given, assuming the rownamess are in the format of `chr_pos_X_ref_alt`
    @requires:
        `plink 1.x`
	"""),
    input='infile:file, metafile:file',
    output='outdir:dir:{{i.infile | fn}}.plink',
    lang=opts.python,
    args=Diot(
        plink=opts.plink,
        keeptxt=False,
        snpbed=None,
        chrmaps={'X': 23, 'Y': 24, 'XY': 25, 'M': 26, 'MT': 26},
    )
)

pGTMat2Bed = proc_factory(
    desc='Convert a genotype matrix to bed file',
    config=Diot(annotate="""
    @name:
        pGTMat2Bed
    @description:
        Convert a genotype matrix to a bed file containing the coordinates of the mutations
    @input:
        infile: The genotype matrix. Row names must follow `<chr>_<pos>_<rsid>_<ref>_<alt>`
    @output:
        outfile: The output bed file. Default: `outfile:file:{{i.infile | fn}}.bed`
    @args:
        `ncol`  : How many columns of bed to output. Default: `6`.
            - Possible values: 3, 6, 8, 66, 88
            - If `8`, then reference and alternative alleles will be 7th and 8th column
            - If `66`, then genotypes will be attached to BED6
            - If `88`, then genotypes will be attached to `ncol = 8`
        `name`  : Use the neat name (usually rsid) or full name (row names). Default: `neat`
        `inopts`: Options to read the input file. Default: `Diot(cnames = True)`
	"""),
    input='infile:file',
    output='outfile:file:{{i.infile | fn}}.bed',
    lang=opts.python,
    args=Diot(
        inopts=Diot(cnames=True),
        ncol=6,
        name='neat'  # full,
    )
)

pCallRate = proc_factory(
    desc='Calculate sample/snp call rate from single sample vcfs',
    lang=opts.Rscript,
    config=Diot(annotate="""
    @name:
        pCallRate
    @description:
        Calculate sample/snp call rate from single sample vcfs
    @input:
        indir:     The dir containing the vcfs
    @output:
        `outsample:file`: The report of call rate for each sample
        `figsample:file`: The bar chat of sample call rates
        `outsnp:file`:    The report of call rate for each snp
        `figsnp:file`:    The bar chat of snp call rates
	"""),
    input="indir:file",
    output="outdir:dir:{{ i.indir | fn }}.callrate",
    args=Diot(
        histplotggs=[],
        devpars=Diot({'res': 300, 'width': 2000, 'height': 2000}),
    )
)

pCepip = proc_factory(
    desc='Run cepip for input mutations.',
    config=Diot(annotate="""
    @name:
        pCepip
    @description:
        Run CEPIP.
    @input:
        infile: The input file (vcf or avinput)
    @output:
        outfile: The cepip result file
    @args:
        `cepip`:    The path of cepip
        `cell` :    The related cell line
        `params`:   Other params for cepip
    @requires:
        [`cepip`](http://jjwanglab.org/cepip/)
	"""),
    input="infile:file",
    output="outfile:file:{{i.infile | fn}}.cepip.txt",
    lang=opts.python,
    args=Diot(
        cepip=opts.cepip,
        cell="",
        params=Diot(),
    )
)

pMutSig = proc_factory(
    desc='Run MutSig.',
    config=Diot(annotate="""
    @name:
        pMutSig
    @description:
        MutSig stands for "Mutation Significance".  MutSig analyzes lists of mutations discovered in DNA sequencing, to identify genes that were mutated more often than expected by chance given background mutation processes.
        For more information, see Lawrence, M. et al. Mutational heterogeneity in cancer and the search for new cancer-associated genes. Nature 499, 214-218 (2013).
        See [dcumentation](http://archive.broadinstitute.org/cancer/cga/mutsig_run)
    @input:
        infile: mutation table
    @output:
        `outdir:dir`: The output directory
    @args:
        `mutsig` : The path to `run_MutSigCV.sh`, default: 'mutsig'
        `mcr`    : The Matlab MCR path
        `cvrg`   : coverage table
        `cvrt`   : covariates table
        `mutdict`: mutation_type_dictionary_file
        `chrdir` : chr_files_hg18 or chr_files_hg19
    @requires:
        [MutSig](http://archive.broadinstitute.org/cancer/cga/mutsig_download)
	"""),
    input='infile:file',
    output="outdir:dir:{{i.infile | fn}}.mutsig",
    args=Diot(
        cvrg=opts.mutsig_cvrg,
        cvrt=opts.mutsig_cvrt,
        mutdict=opts.mutsig_mutdict,
        chrdir=opts.mutsig_chrdir,
        mutsig=opts.mutsig,
        mcr=opts.mcr,
    )
)

pMafLiftover = proc_factory(
    desc='Liftover a maf file from one assembly to another',
    config=Diot(annotate="""
    @name:
        pMafLiftover
    @description:
        Liftover maf file from one assembly to another
    @input:
        infile: The input maf file
    @output:
        outfile: The output maf file
    @args:
        `liftover`: The liftOver program.
        `lochain`:  The liftOver chain file.
        `genome`:   The target genome.
    @requires:
        liftOver from UCSC
	"""),
    input='infile:file',
    output='outfile:file:{{i.infile|fn|?.endswith: ".maf"|!@append: ".maf"}}',
    lang=opts.python,
    args=Diot(
        liftover=opts.liftover,
        lochain=opts.lochain,
        genome=opts.genome,
    )
)

pMafMerge = proc_factory(
    desc='Merge maf files',
    config=Diot(annotate="""
    @input:
        `infiles:files`: The maf files
    @output:
        outfile: The merged maf file
    @args:
        `excols`: How to deal with extra columns other than 34 standard columns from TCGA.
            - merge(default): Merge the columns, if one not exists, fill with __UNKNOWN__.
            - discard: Just discard the extra columns, with only 34 columns left. So you can also put just one maf file in the indir with some columns missed to fill it with standard columns.
    """),
    input='infiles:files',
    output='outfile:file:{{i.infiles | fs2name}}.maf',
    lang=opts.python,
    args=Diot(excols='merge'),  # discard,
    envs=Diot(fs2name=fs2name)
)

pMaf2GeneMat = proc_factory(
    desc="Convert MAF file to a gene-sample mutation matrix.",
    lang=opts.python,
    config=Diot(annotate="""
    @input:
        infile: The input MAF file
    @output:
        outfile: The output gene-sample mutation matrix
    @args:
        classes (list|str): Classes of mutations to be counted.
            - You can also use the groups (red, blue, green and orange)
            - If not provided, all classes will be counted
        binary (bool): Whether just output the binary value (0/1) or not.
        all (bool): Whether include all genes or not.
            - If this is `False`, genes with mutations not selected will not be included
    """),
    input='infile:file',
    output='outfile:file:{{i.infile | stem}}.genes.txt',
    args=Diot(classes='', binary=False, all=True)
)

pMaf2MutMat = proc_factory(
    desc="Convert MAF file to a mutation-sample count matrix.",
    lang=opts.python,
    config=Diot(annotate="""
    @input:
        infile: The input MAF file
    @output:
        outfile: The output count matrix
    @args:
        classes (list|str): Classes of mutations to be counted.
            - You can also use the groups (red, blue, green and orange)
            - If not provided, all classes will be counted
        binary (bool): Whether just output the binary value (0/1) or not.
        all (bool): Whether include all mutations or not.
            - If this is `False`, mutations not selected will not be included
    """),
    input='infile:file',
    output='outfile:file:{{i.infile | stem}}.mutations.txt',
    args=Diot(classes='', binary=False, all=True)
)

pMaf2Mat = proc_factory(
    desc='Convert maf file to a gene-based mutation matrix',
    config=Diot(annotate="""
    @name:
        pMaf2Mat
    @description:
        Convert maf file to a gene(row)-sample(column) matrix
    @input:
        infile: The input file
    @output:
        outfile: The output matrix
    @args:
        `mutypes`: Provide manual list of variant classifications to be counted, only effective when `args.binary = False`. Default: `None` (all counted)
        `binary` : Just generate a binary matrix instead of a count matrix. Default: `False`
        `na`: What value to use for no mutations reported on a gene. Default: `0`
        `samfn`  : A function (in r) to transform the sample names. Default: `function(sample) sample`
	"""),
    input='infile:file',
    output='outfile:file:{{i.infile | fn}}.mat.txt',
    lang=opts.Rscript,
    args=Diot(
        binary=False,
        mutypes=None,
        na=0,
        samfn='function(sample) sample',
    )
)

pMaftools = proc_factory(
    desc='Basic analysis on somatic mutations of a group of samples',
    config=Diot(annotate="""
    @input:
        indir: The input directory or a single maf file. A directory could contain:
            - `*.maf` or `*.maf.gz` file (required)
            - `*.annot.tsv` or `*.annot.txt` file (see: https://github.com/PoisonAlien/maftools/blob/master/inst/extdata/tcga_laml_annot.tsv)
            - `all_lesions.conf_*.txt`: Gistic cnv data
            - `amp_genes.conf_*.txt`: Gistic cnv data
            - `del_genes.conf_*.txt`: Gistic cnv data
            - `scores.gistic`: Gistic cnv data
            - `*.seg.txt`: CBS segments data
        msdir: MutSig result directory.
            - Must have`*sig_genes.txt` to do pancancer comparison.
    @output:
        outdir: The output directory
    @args:
        ngenes : Top number of genes to plot for some plots.
        extypes: Exclude mutation types, only consider nonsynonymous mutations.
        isTCGA : If the maf file is from TCGA?
        ref    : The reference file for signature plot.
        plot   : Which plots to plot.
        params : The extra parameters for each plot function.
        devpars: The parameters for plot device.
        nthread: Number of threads used for multiple plot of one type.
    @requires:
        [Maftools](https://bioconductor.org/packages/devel/bioc/vignettes/maftools/inst/doc/maftools.html)
    """),
    input='indir:file, msdir:file',
    output='outdir:dir:{{i.indir | fn}}.maftools',
    lang=opts.Rscript,
    args=Diot(
        ngenes=10,
        isTCGA=False,
        genome=opts.genome,
        devpars=Diot(res=300, height=2000, width=2000),
        nthread=1,
        # exclude mutation types, only consider nonsynonymous mutations.
        extypes=[
            "Intron", "5'UTR", "3'UTR", "IGR", "5'Flank", "3'Flank", "Silent"
        ],
        plot=Diot(
            summary=True,
            oncoplot=True,
            oncostrip=True,
            titv=True,
            lollipop=True,
            cbsseg=True,
            rainfall=True,
            tcgacomp=True,
            vaf=True,
            genecloud=True,
            gisticGenome=True,
            gisticBubble=True,
            gisticOncoplot=True,
            somInteraction=True,
            oncodrive=True,
            pfam=True,
            pancan=True,
            survival=True,
            heterogeneity=True,
            signature=True,
        ),
        params=Diot(
            summary=Diot(rmOutlier=True, addStat='median', dashboard=True),
            oncoplot=Diot(),
            oncostrip=Diot(),
            titv=Diot(),
            lollipop=Diot(),
            cbsseg=Diot(labelAll=True),
            rainfall=Diot(detectChangePoints=True),
            tcgacomp=Diot(),
            vaf=Diot(flip=True),
            genecloud=Diot(minMut=3),
            gisticGenome=Diot(markBands='all'),
            gisticBubble=Diot(),
            gisticOncoplot=Diot(),
            somInteraction=Diot(),
            oncodrive=Diot(minMut=5,
                           pvalMethod='zscore',
                           fdrCutOff=0.1,
                           useFraction=True),
            pfam=Diot(),
            pancan=Diot(qval=0.1, label=1),
            survival=Diot(),
            heterogeneity=Diot(),
            signature=Diot(nTry=6, plotBestFitRes=False),
        ))
)

pMutationSigs = proc_factory(
    desc='Find similar COSMIC mutation signatures for MAF file.',
    config=Diot(annotate="""
    @name:
        pMutationSigs
    @description:
        Find similar COSMIC mutation signatures for MAF file
        using https://github.com/pwwang/deconstruct_sigs_py
    @input:
        infile: The input maf file.
    @output:
        `outdir:dir`: The output directory
    @args:
        `font_family`: Font family for plotting.
        `font_weight`: Font weight for plotting.
        `sig_cutoff` : Significance cutoff for signatures.
        `err_thres`  : The threshold to top the iteration.
        `ref`        : The reference genome.
	"""),
    input='infile:file',
    output='outdir:dir:{{i.infile | fn2}}.signature',
    lang=opts.python,
    args=Diot(
        font_family='Arial',
        font_weight='bold',
        sig_cutoff=0.05,
        err_thres=1e-3,
        ref=opts.ref,
    )
)

pSnpEff = proc_factory(
    desc='Discovery and characterization of artifactual mutations',
    config=Diot(annotate="""
    @name:
        pSnpEff
    @description:
        This is the default command. It is used for annotating variant filed (e.g. VCF files).
    @input:
        infile:  The input file
    @output:
        `outdir:file`: The directory containing output anntated file, snpEff_genes.txt and snpEff_summary.html
    @args:
        `snpEff`:       The snpEff executable, default: "snpEff"
        `params`:    Other parameters for `snpEff`, default: "-Xms1g -Xmx4g -v"
        `genome`:    The genome used for annotation, default: "hg19"
        `informat`:  The format of input file [vcf or bed], default: "vcf"
        `outformat`: The format of output file [vcf, gatk, bed, bedAnn], default: "vcf"
        `csvStats`:  Whether to generate csv stats file, default: True.
        `htmlStats`: Whether to generate the html summary file, default: False.
        `javamem`:   The memory to use. Default: '-Xms1g -Xmx8g'
    @requires:
        [snpEff](http://snpeff.sourceforge.net/SnpEff_manual.html)
	"""),
    input="infile:file",
    output="outdir:dir:{{infile | fn}}.snpeff",
    args=Diot({
        "snpEff": "snpEff",
        "javamem": "-Xms1g -Xmx8g",
        "genome": "hg19",
        "informat": "vcf",
        "outformat": "vcf",
        "csvStats": True,
        "htmlStats": False,
        "params": ""
    }),
    script="""
        csvfile="{{outdir}}/{{infile | fn}}.csvstat"
        sumfile="{{outdir}}/{{infile | fn}}.html"
        outfile="{{outdir}}/{{infile | fn}}.snpEff.vcf"
        csvStats=""
        if [[ "{{args.csvStats}}" == "True" ]]; then
            csvStats="-csvStats \\"$csvfile\\""
        fi
        stats=""
        if [[ "{{args.htmlStats}}" == "True" ]]; then
            stats="-stats \\"$sumfile\\""
        fi
        echo {{args.snpEff}} {{args.javamem}} -i {{args.informat}} -o {{args.outformat}} $csvStats $stats {{args.params}} {{args.genome}} "{{infile}}"
        {{args.snpEff}} {{args.javamem}} -i {{args.informat}} -o {{args.outformat}} $csvStats $stats {{args.params}} {{args.genome}} "{{infile}}" > "$outfile"
    """
)

pDToxoG = proc_factory(
    desc='Run D-ToxoG on MAF files',
    config=Diot(annotate="""
    @description:
        Run D-ToxoG on MAF files with columns listed at:
        https://software.broadinstitute.org/cancer/cga/dtoxog
        However,`i_picard_oxoQ` is required but not documented. This process
        will try to put 0's for the field to let the program run.
        To be stricter, use picard's CollectOxoGMetrics to get this column.
    @input:
        infile: The input maf file
    @output:
        outfile: The output maf file.
            - with extra columns added:
            - `pox` --  p-value that the call is actually an artifact
            - `qox` --  false detection rate score.
            - `pox_cutoff` --  minimum pox score for artifact.
            - `isArtifactMode`:
                - Variant is C>A, G>T: 1
                - Variant is not C>A or G>T: 0
            - `oxoGCut`:
                - Variant is marked as artifact: 1
                - Variant is not an artifact: 0
    @args:
        dtoxog : D-ToxoG executable.
        nthread: Maximum threads used by matlab.
        keep   : Whether keep those artifact mode mutations in output MAF file or not.
        params : Other parameters for `startFilterMAFFile`
            - See more in `startFilterMAFFile.m` or run `dtoxog` directly
    """),
    input='infile:file',
    output='outfile:file:{{i.infile | stem}}.dtoxog.maf',
    lang=opts.python,
    args=Diot(nthread=1,
              keep=True,
              dtoxog=opts.dtoxog,
              params=Diot(isGeneratingPlots=True,
                          globalPoxoG=.96,
                          artifactThresholdRate=.01))
)

pMaf2Vcf = proc_factory(
    desc='Convert MAF file back to VCF files',
    config=Diot(annotate="""
    @input:
        infile: The input MAF file
    @output:
        outfile: Output multi-sample VCF containing all TN-pairs
        outdir: A directory with output VCF files
    @args:
        maf2vcf (str): Path to `maf2vcf.pl` from `vcf2maf` tool.
        merge: Whether merge the VCF for individual samples or not.
        params: Other parameters for `maf2vcf.pl`
    """),
    lang=opts.python,
    input='infile:file',
    output=[
        'outfile:file:{{i.infile | stem}}.vcfs/{{i.infile | stem}}.vcf',
        'outdir:dir:{{i.infile | stem}}.vcfs'
    ],
    args=Diot(maf2vcf=opts.maf2vcf,
              ref=opts.ref,
              params=Diot({'per-tn-vcfs': True})),
)

pMafAddChr = proc_factory(
    desc='Add chr to chromosome if not present',
    config=Diot(annotate="""
    @input:
        infile: The input MAF file
    @output:
        outfile: The output MAF file
    """),
    lang=opts.python,
    input='infile:file',
    output='outfile:file:{{i.infile | stem}}.maf'
)

pMafExtractSample = proc_factory(
    desc='Filter MAF file with given samples',
    config=Diot(annotate="""
    @input:
        infile: The input MAF file
        samfile: The tumor sample file
            - Could also be a list of samples, separated by comma
            - Overwrite `args.samples`
    @output:
        outfile: The output file contain only the given samples
    @args:
        samples (str|list): The samples or a list of samples
    """),
    input='infile:file, samfile:var',
    output='outfile:file:{{i.infile | stem}}.subset.maf',
    lang=opts.python,
    args=Diot(samples=[])
)

pMafSampleFilter = pMafExtractSample.copy()

pMafExtractClass = proc_factory(
    desc='Filter MAF file with given classes',
    config=Diot(annotate="""
    @input:
        infile: The input MAF file
        classfile: The variant class file
            - Could also be a list of classes, separated by comma
            - Overwrite `args.classes`
    @output:
        outfile: The output file contain only the given classes
    @args:
        classes (str|list): The classes or a list of classes
    """),
    input='infile:file, classfile:var',
    output='outfile:file:{{i.infile | stem}}.subclass.maf',
    lang=opts.python,
    args=Diot(classes=[])
)

pMafGetSamples = proc_factory(
    desc='Get samples from MAF file',
    config=Diot(annotate="""
    @input:
        infile: The input MAF file
    @output:
        outfile: The output sample file
    @args:
        out: Which samples to output, tumor, normal or both.
        outopts: The output options
    """),
    lang=opts.python,
    input='infile:file',
    output='outfile:file:{{i.infile | stem}}.samples.txt',
    args=Diot(out='both', outopts=Diot(cnames=True))
)

pMafFromTsv = proc_factory(
    desc='Convert a TSV file with essential columns to a MAF file',
    config=Diot(annotate="""
    @description:
        Convert a TSV file with essential columns to a MAF file.
        See https://docs.gdc.cancer.gov/Data/File_Formats/MAF_Format/#protected-maf-file-structure for MAF file columns.
        Essential columns include: Chromosome, Start_Position, Reference_Allele, Tumor_Seq_Allele2
        End_Position = Start_Position + 1 if not provided
    @input:
        infile: The TSV file, cnames(header) is required
    @output:
        output: The output MAF file
    @args:
        inopts   (Diot): Options to read input file.
        genome   (str) : The genome to fill the `NCBI_Build` column
        missing  (str) : The string used to fill other missing values.
        tumor    (str) : The string used to fill `Tumor_Sample_Barcode` if not provided.
        normal   (str) : The string used to fill `Matched_Norm_Sample_Barcode` if not provided.
        full     (bool): Output the basic MAF file (32 columns) or full (126 columns)
        refall   (path): The gene GTF file to extract gene names according to the coordinates
        bedtools (bool): Used to extract gene names
    """),
    input='infile:file',
    output='outfile:file:{{i.infile | stem}}.maf',
    lang=opts.python,
    args=Diot(
        inopts=Diot(cnames=True),
        genome=opts.genome,
        missing='__UNKNOWN__',
        tumor='TUMOR',
        normal='NORMAL',
        full=True,
        refall=opts.refall,
        bedtools=opts.bedtools,
    )
)
