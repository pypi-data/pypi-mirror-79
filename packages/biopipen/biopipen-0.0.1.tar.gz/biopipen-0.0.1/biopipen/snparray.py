"""Snp-array utilities"""
from diot import Diot
from . import opts, proc_factory

# pylint: disable=invalid-name

pGistic = proc_factory(
    desc='Runing GISTIC to get CNV results.',
    config=Diot(annotate="""
    @name:
        pGistic
    @description:
        Runing GISTIC to get CNV results.
        see: ftp://ftp.broadinstitute.org/pub/GISTIC2.0/GISTICDocumentation_standalone.htm
    @input:
        `segfile:file`: Segmentation File
        `mkfile:file` : Markers File
        `alfile:file` : Array List File
        `cnvfile:file`: CNV File
    @output:
        `outdir:dir`: The output directory
            - All Lesions File (all_lesions.conf_XX.txt, where XX is the confidence level)
            - Amplification Genes File (amp_genes.conf_XX.txt, where XX is the confidence level)
            - Deletion Genes File (del_genes.conf_XX.txt, where XX is the confidence level)
            - Gistic Scores File (scores.gistic)
            - Segmented Copy Number (raw_copy_number.pdf)
    @args:
        `gistic`: The path to gistic.
        `genome`: The genome used to select refgene file from refgenefiles.
        `mcr`:    The mcr path
        `params`: Other params for gistic
    """),
    input='segfile:file, mkfile:file, alfile:file, cnvfile:file',
    output='outdir:dir:{{i.segfile | fn}}.gistic',
    lang=opts.python,
    args=Diot(
        gistic=opts.gistic,
        genome=opts.genome,
        mcr=opts.mcr,  # 2.0 requires r2014a,
        params=Diot(),
    )
)

pSNP6Genotype = proc_factory(
    desc='Call genotypes from GenomeWideSNP_6 CEL file',
    config=Diot(annotate="""
    @name:
        pSNP6Genotype
    @description:
        Call genotypes from GenomeWideSNP_6 CEL file
    @input:
        `celfile:file`: the CEL file
    @output:
        `outfile:file`: the outfile containing probe name and genotypes
            - format: `<Probe name>\t<genotype>`
            - `<genotype>` = 0: AA, 1: AB, 2: BB
    @requires:
        [bioconductor-crlmm](http://bioconductor.org/packages/release/bioc/html/crlmm.html)
    """),
    input="celfile:file",
    output="outfile:file:{{celfile | fn}}.geno.txt",
    lang="Rscript",
    script="""
        require(oligoClasses)
        library(crlmm)
        crlmmResult <- crlmm("{{celfile}}", SNRMin=0)
        gts = calls(crlmmResult) - 1
        #outfile = paste (sep="/", "/data2/junwenwang/panwen/output/TCGA-genotypes/LUAD/gts", paste(basename(args[1]), "gts", sep="."))
        write.table(gts, file="{{outfile}}", sep="\\t", row.names=TRUE, quote=FALSE, col.names=FALSE)
    """
)

pGenoToAvInput = proc_factory(
    desc=('Convert the genotype called by pSNP6Genotype to '
          'ANNOVAR input file using dbsnp id'),
    config=Diot(annotate="""
    @name:
        pGenoToAvInput
    @description:
        Convert the genotype called by pSNP6Genotype to [ANNOVAR input file](http://annovar.openbioinformatics.org/en/latest/user-guide/input/#annovar-input-file) using dbSNP identifiers.
    @input:
        `genofile:file`: the genofile generated by pSNP6Genotype, must be sorted by probe names
        `annofile:flie`: the annotation file downloaded from http://www.affymetrix.com/support/technical/annotationfilesmai.affx
            - Could be in .gz format
    @output:
        `outfile:file`: the avinput file
    @requires:
        [python-read2](https://github.com/pwwang/read2)
    """),
    input="genofile:file, annofile:file",
    output="outfile:file:{{genofile | fn}}.avinput",
    script="""
    #!/usr/bin/env python
    from read2 import read2
    fout = open ("{{outfile}}", "w")
    def rmatch (line1, line2):
        line2 = [item[1:-1] for item in line2]
        if line1[0].startswith ("#"): return -1
        if line2[0].startswith ("#") or line2[0].startswith("Probe Set ID"): return 1
        tomatch = line2[0]
        if line1[0] < tomatch: return -1
        if line1[0] > tomatch: return 1
        return 0

    def ract (line1, line2):
        line2 = [item[1:-1] for item in line2]
        snp   = line2[1]
        chr   = line2[2]
        pos   = line2[3]
        allA  = line2[8]
        allB  = line2[9]
        comm  = line1
        comm.pop(0)
        fout.write (" ".join([chr,pos,pos,allA, allB, snp, "|".join(comm)]) + "\\n")
    r = read2 ("{{genofile}}", "{{annofile}}")
    r.delimit ("\\t", ",")
    r.match (rmatch)
    r.act (ract)
    r.run()
    fout.close()
    """
)
