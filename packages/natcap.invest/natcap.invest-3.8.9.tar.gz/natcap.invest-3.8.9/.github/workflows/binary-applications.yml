name: Build InVEST App Binaries

on:
    push:
    pull_request:

jobs:
    check-syntax-errors:
        name: "Check for syntax errors"
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2

            - name: Set up python 3.7
              uses: actions/setup-python@v1
              with:
                  python-version: 3.7

            - name: Set up environment
              run: python -m pip install --upgrade flake8

            - name: Lint with flake8
              run: |
                # stop the build if there are Python syntax errors or undefined names
                python -m flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics
                # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
                python -m flake8 src --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    build-windows-binaries:
        name: "Build windows binaries"
        needs: check-syntax-errors
        runs-on: windows-latest
        env:
            PYTHON_VERSION: 3.7
            PYTHON_ARCH: x86
        steps:
            - uses: actions/checkout@v2
              with:
                  fetch-depth: 0  # fetch complete history

            - name: Fetch git tags
              run: git fetch origin +refs/tags/*:refs/tags/*

            - name: Restore pip cache
              uses: actions/cache@v1
              with:
                  path: ~\AppData\Local\pip\Cache
                  key: windows-py${{ env.PYTHON_VERSION }}-${{ env.PYTHON_ARCH}}-pip-${{ hashFiles('**/requirements*.txt') }}-exe

            - name: Set up python
              uses: actions/setup-python@v1
              with:
                  python-version: ${{ env.PYTHON_VERSION }}
                  architecture: ${{ env.PYTHON_ARCH }}

            - name: Install python dependencies
              shell: powershell
              env:
                  PIP_EXTRA_INDEX_URL: "http://pypi.naturalcapitalproject.org/simple/"
                  PIP_TRUSTED_HOST: "pypi.naturalcapitalproject.org"
                  PIP_PREFER_BINARY: 1
              run: |
                  python -m pip install --upgrade pip pytest setuptools
                  python -m pip install -r requirements.txt -r requirements-dev.txt -r requirements-gui.txt
                  python -m pip install .

            - name: Install build dependencies
              shell: powershell
              run: |
                  # Appveyor build scripts expects PYTHON to point to the dir containing python.
                  $env:PYTHON = python -c "import sys, os; print(os.path.dirname(sys.executable))"
                  ./ci/windows-ci-binary-install.ps1

            - name: Clone sample data repo (non-lfs)
              shell: bash
              run: |
                  GIT_URL=$(make jprint-GIT_SAMPLE_DATA_REPO)
                  LOCALPATH=$(make jprint-GIT_SAMPLE_DATA_REPO_PATH)
                  GIT_REV=$(make jprint-GIT_SAMPLE_DATA_REPO_REV)

                  # Only clone the files ... deliberately not cloning LFS data
                  # Installer needs .invest.json files only, and these are not
                  # stored in LFS.
                  GIT_LFS_SKIP_SMUDGE=1 git clone $GIT_URL $LOCALPATH
                  git -C $LOCALPATH checkout $GIT_REV

            - name: Build user's Guide
              run: make userguide

            - name: Build windows binaries
              run: make binaries

            - name: Build installer
              run: make windows_installer

            - name: Set up GCP
              # Secrets not available in PR so don't use GCP.
              if: github.event_name != 'pull_request'
              uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
              with:
                  version: '281.0.0'
                  service_account_key: ${{ secrets.GOOGLE_SERVICE_ACC_KEY }}

            - name: Sign binaries
              # Secrets not available in PR so don't use GCP.
              if: github.event_name != 'pull_request'
              shell: powershell
              run: |
                # figure out the path to signtool.exe (it keeps changing with SDK updates)
                $env:SIGNTOOL_PATH = @(Get-ChildItem -Path 'C:\Program Files (x86)\\Windows Kits\\10' `
                    -Include 'signtool.exe' -File -Recurse `
                    -ErrorAction SilentlyContinue)[0] | Select-Object -ExpandProperty FullName
                $env:INSTALLER_BINARY = @(gci 'dist/*.exe')[0] | Select-Object -ExpandProperty FullName
                $env:GSUTIL_PATH = (Get-Command gsutil).path

                # Specify which python version we want to use (it's the one we're using
                # in actions/setup-python.
                $env:CLOUDSDK_PYTHON = (Get-Command python).path
                $env:CLOUDSDK_GSUTIL_PYTHON = (Get-Command python).path

                make CERT_KEY_PASS=${{ secrets.STANFORD_CERT_KEY_PASS }} `
                        GSUTIL=$env:GSUTIL_PATH `
                        BIN_TO_SIGN=$env:INSTALLER_BINARY `
                        SIGNTOOL=$env:SIGNTOOL_PATH `
                    signcode_windows

            - name: Deploy artifacts to GCS
              # Secrets not available in PR so don't use GCP.
              if: github.event_name != 'pull_request'
              run: |
                  $env:GSUTIL_PATH = (Get-Command gsutil).path

                  # Specify which python version we want to use (it's the one we're using
                  # in actions/setup-python.
                  $env:CLOUDSDK_PYTHON = (Get-Command python).path
                  $env:CLOUDSDK_GSUTIL_PYTHON = (Get-Command python).path

                  make GSUTIL=$env:GSUTIL_PATH deploy

            - name: Upload installer artifact
              if: always()
              uses: actions/upload-artifact@v2-preview
              with:
                  name: InVEST-windows-installer
                  path: dist/*.exe

            - name: Upload user's guide artifact
              uses: actions/upload-artifact@v2-preview
              with:
                  name: InVEST-user-guide
                  path: dist/InVEST_*_userguide.zip

    build-mac-binaries:
        name: "Build mac binaries"
        needs: check-syntax-errors
        runs-on: macos-10.15
        env:
            PYTHON_VERSION: 3.7
            PYTHON_ARCH: x86
        steps:
            - uses: actions/checkout@v2
              with:
                  fetch-depth: 0  # fetch complete history

            - name: Fetch git tags
              run: git fetch origin +refs/tags/*:refs/tags/*

            - name: Install homebrew dependencies
              run: |
                  brew update
                  brew install mercurial pandoc

            - name: Restore conda cache
              uses: actions/cache@v1
              with:
                  path: ~/opt/anaconda3
                  key: mac-py${{ env.PYTHON_VERSION }}-${{ env.PYTHON_ARCH}}-conda-${{ hashFiles('**/requirements*.txt') }}-exe

            - name: Set up conda
              uses: goanpeca/setup-miniconda@v1.1.2
              with:
                  activate-environment: mac-env  # This is also hardcoded in Pyinstaller's invest.spec
                  auto-update-conda: true
                  python-version: 3.7
                  channels: conda-forge

            - name: Build conda env with python dependencies
              shell: bash -l {0}
              run: |
                  conda upgrade -y pip setuptools
                  conda install toml requests
                  conda install $(python -c "import toml;print(' '.join(toml.load('pyproject.toml')['build-system']['requires']))")
                  python ./scripts/convert-requirements-to-conda-yml.py \
                        requirements.txt \
                        requirements-dev.txt \
                        requirements-gui.txt > requirements-all.yml
                  conda env update --file requirements-all.yml

                  # Libtiff from conda defaults channel gets around issue with missing libwebp
                  conda install --yes libtiff

            - name: Build binaries
              shell: bash -l {0}
              run: |
                  make install
                  make mac_zipfile

            - name: Set up GCP
              # Secrets not available in PR so don't use GCP.
              # We only want to upload artifacts to a release object in a release.
              if: github.event_name != 'pull_request'
              uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
              with:
                  version: '281.0.0'
                  service_account_key: ${{ secrets.GOOGLE_SERVICE_ACC_KEY }}

            - name: Deploy artifacts to GCS
              # Secrets not available in PR so don't use GCP.
              if: github.event_name != 'pull_request'
              shell: bash -l {0}  # needed for conda activation
              run: make deploy

            - name: Upload binaries artifact
              uses: actions/upload-artifact@v2-preview
              with:
                  name: InVEST-mac-binaries
                  path: dist/InVEST-*-mac.zip

    build-sampledata:
        name: Build sampledata archives
        needs: check-syntax-errors
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
              with:
                  fetch-depth: 0  # Fetch complete history
            - run: git fetch origin +refs/tags/*:refs/tags/*

            - uses: actions/setup-python@v1
              with:
                  python-version: 3.7

            - run: |
                pip install toml
                pip install $(python -c "import toml;print(' '.join(toml.load('pyproject.toml')['build-system']['requires']))")

            - run: make sampledata sampledata_single

            - name: Set up GCP
              # Secrets not available in PR so don't use GCP.
              if: github.event_name != 'pull_request'
              uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
              with:
                  version: '281.0.0'
                  service_account_key: ${{ secrets.GOOGLE_SERVICE_ACC_KEY }}

            - name: Deploy artifacts to GCS
              # Secrets not available in PR so don't use GCP.
              # We only want to upload artifacts to a release object in a release.
              if: github.event_name != 'pull_request'
              run: make deploy

            - name: Upload sample data artifact
              uses: actions/upload-artifact@v2-preview
              with:
                  name: InVEST-sample-data
                  path: dist/*.zip

    upload-binaries-to-release:
        name: Upload binaries to a release
        needs: [build-mac-binaries,
                build-windows-binaries,
                build-sampledata]
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
              with:
                  fetch-depth: 0  # fetch complete history
            - run: git fetch origin +refs/tags/*:refs/tags/*

            - name: Download windows installer artifact
              uses: actions/download-artifact@v2-preview
              with:
                  name: InVEST-windows-installer
                  path: dist

            - name: Download mac binaries artifact
              uses: actions/download-artifact@v2-preview
              with:
                  name: InVEST-mac-binaries
                  path: dist

            - name: Download sample data artifact
              uses: actions/download-artifact@v2-preview
              with:
                  name: InVEST-sample-data
                  path: dist

            - name: Download user's guide artifact
              uses: actions/download-artifact@v2-preview
              with:
                  name: InVEST-user-guide
                  path: dist

            - uses: actions/setup-python@v1
              with:
                  python-version: 3.7

            - run: |
                pip install toml
                pip install $(python -c "import toml;print(' '.join(toml.load('pyproject.toml')['build-system']['requires']))")

            - name: Upload distributions to release
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              shell: bash
              run: |
                if hub release show ${GITHUB_REF:10}
                then
                    ls -la dist
                    FILELIST=release_file_list.txt
                    make jprint-USERGUIDE_ZIP_FILE >> $FILELIST
                    make jprint-MAC_BINARIES_ZIP_FILE >> $FILELIST
                    make PYTHON_ARCH=x86 jprint-WINDOWS_INSTALLER_FILE >> $FILELIST
                    make jprint-SAMPLEDATA_SINGLE_ARCHIVE >> $FILELIST

                    # Make sure the file contains what it should
                    cat $FILELIST

                    set -x  # for debugging
                    for FILE in `cat $FILELIST`
                    do
                        hub release edit -a $FILE -m "" ${GITHUB_REF:10}
                    done
                    set +x
                else
                    echo "Release for ${GITHUB_REF:10} not found; skipping binary upload"
                fi
