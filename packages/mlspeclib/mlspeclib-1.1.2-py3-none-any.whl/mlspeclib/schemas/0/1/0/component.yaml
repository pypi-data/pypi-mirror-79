# TODO: Code gen from here https://github.com/kubeflow/pipelines/blob/master/sdk/python/kfp/components/_structures.py
mlspec_schema_version:
  # Identifies the version of this schema
  meta: 0.1.0

mlspec_base_type:
  # Identifies the base type of this schema
  meta: base

mlspec_schema_type:
  # Identifies the type of this schema
  meta: component

schema_version:
  # Identifies version of MLSpec to use
  type: semver
  required: True

schema_type:
  # Identifies version of MLSpec to use
  type: allowed_schema_types
  required: True

name:
  type: string
  required: True

description:
  type: string
  required: True

metadata:
  type: nested
  schema:
    annotations:
      type: dict
      required: False
      empty: True

snapshotDirectory:
  type: path
  required: False
  empty: True

inputs:
  type: list_interfaces
  required: True
  empty: True

outputs:
  type: list_interfaces
  required: True
  empty: True

command:
  type: string
  required: False

communicator: # Only on Azure?
  type: dict
  require: False

# Specifies how to execute the component instance. There are two implementation types,
# container and graph. (The latter is not in scope for this document.)
# In future we may introduce more implementation types like daemon or K8sResource.
implementation:
  type: nested
  schema:
    container:
      # Describes the Docker container that implements the component. A portable subset of the Kubernetes Container v1 spec.
      type: nested
      schema:
        image:
          # Name of the Docker image.
          type: string
          required: False
        command:
          # Entrypoint array. The Docker image’s ENTRYPOINT is used if this is not provided.
          # Each item is either a string or a placeholder. The most common placeholders are {inputValue: Input name},
          # {inputPath: Input name} and {outputPath: Output name}.
          type: list
          required: False
        args:
          # Arguments to the entrypoint. The Docker image’s CMD is used if this is not provided.
          # Each item is either a string or a placeholder. The most common placeholders are
          # {inputValue: Input name}, {inputPath: Input name} and {outputPath: Output name}.
          type: list
          required: False
        env:
          # Map of environment variables to set in the container.
          type: dict
          required: False
        fileOutputs:
          # Legacy property that is only needed in cases where the container always stores the output data
          # in some hard-coded non-configurable local location. This property specifies a map between some
          # outputs and local file paths where the program writes the output data files. Only needed for
          # components that have hard-coded output paths. Such containers need to be fixed by modifying the
          # program or adding a wrapper script that copies the output to a configurable location. Otherwise
          # the component may be incompatible with future storage systems.
          type: dict
          required: False

compute: # Only on Azure?
  type: nested
  schema:
    node_count:
      type: string
      required: True
      empty: True
    workerType:
      type: string
      required: True
      empty: True
    scalingpolicy:
      type: string
      required: True
      empty: True
    checkpointpolicy:
      type: string
      required: True
      empty: True
    placementpolicy:
      type: string
      required: True
      empty: True
    os:
      type: string
      required: True
      empty: True
    memory_gb:
      type: int
      required: True
      empty: True

metrics:
  type: list
  required: False

custom:
  type: dict
  required: False
  empty: True
