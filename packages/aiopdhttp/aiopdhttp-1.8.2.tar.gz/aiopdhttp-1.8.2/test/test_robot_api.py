# coding: utf-8

"""
    Robot API

    Robot REST API  # noqa: E501

    OpenAPI spec version: 1.8.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import unittest

import aiopdhttp
from aiopdhttp.api.robot_api import RobotApi  # noqa: E501
from aiopdhttp.rest import ApiException


class TestRobotApi(unittest.TestCase):
    """RobotApi unit test stubs"""

    def setUp(self):
        self.api = aiopdhttp.api.robot_api.RobotApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_add_to_environment(self):
        """Test case for add_to_environment

        Add obstacle to robot environment.  # noqa: E501
        """
        pass

    def test_bind_stop_port_high(self):
        """Test case for bind_stop_port_high

        Bind stop command to high input signal on a specific port  # noqa: E501
        """
        pass

    def test_bind_stop_port_low(self):
        """Test case for bind_stop_port_low

        Bind stop command to low input signal on a specific port  # noqa: E501
        """
        pass

    def test_change_base(self):
        """Test case for change_base

        Setting a new zero point position  # noqa: E501
        """
        pass

    def test_change_tool_info(self):
        """Test case for change_tool_info

        Setting tool properties  # noqa: E501
        """
        pass

    def test_change_tool_shape(self):
        """Test case for change_tool_shape

        Setting tool shape  # noqa: E501
        """
        pass

    def test_close_gripper(self):
        """Test case for close_gripper

        Asking the arm to close the gripper  # noqa: E501
        """
        pass

    def test_disable_gripper(self):
        """Test case for disable_gripper

        Disables gripper  # noqa: E501
        """
        pass

    def test_enable_gripper(self):
        """Test case for enable_gripper

        Enables gripper  # noqa: E501
        """
        pass

    def test_freeze(self):
        """Test case for freeze

        Asking the arm to go to the freeze state  # noqa: E501
        """
        pass

    def test_get_all_from_environment(self):
        """Test case for get_all_from_environment

        Getting robot environment.  # noqa: E501
        """
        pass

    def test_get_base(self):
        """Test case for get_base

        Getting the actual position of the arm base  # noqa: E501
        """
        pass

    def test_get_digital_input(self):
        """Test case for get_digital_input

        Get level of digital input signal  # noqa: E501
        """
        pass

    def test_get_digital_output(self):
        """Test case for get_digital_output

        Get level of digital output signal  # noqa: E501
        """
        pass

    def test_get_from_environment_by_name(self):
        """Test case for get_from_environment_by_name

        Getting obstacle from robot environment by name.  # noqa: E501
        """
        pass

    def test_get_pose(self):
        """Test case for get_pose

        Getting the actual arm pose  # noqa: E501
        """
        pass

    def test_get_position(self):
        """Test case for get_position

        Getting the actual arm position  # noqa: E501
        """
        pass

    def test_get_tool_info(self):
        """Test case for get_tool_info

        Getting actual tool properties  # noqa: E501
        """
        pass

    def test_get_tool_shape(self):
        """Test case for get_tool_shape

        Getting tool shape  # noqa: E501
        """
        pass

    def test_identifier(self):
        """Test case for identifier

        Getting the arm ID  # noqa: E501
        """
        pass

    def test_information(self):
        """Test case for information

        Getting the information about robot  # noqa: E501
        """
        pass

    def test_jogging(self):
        """Test case for jogging

        Controls the robotic arm in 'jogging' mode.  # noqa: E501
        """
        pass

    def test_open_gripper(self):
        """Test case for open_gripper

        Asking the arm to open the gripper  # noqa: E501
        """
        pass

    def test_pack(self):
        """Test case for pack

        Asking the arm to reach a compact pose for transportation  # noqa: E501
        """
        pass

    def test_recover(self):
        """Test case for recover

        Recover robot after emergency if it is possible.  # noqa: E501
        """
        pass

    def test_relax(self):
        """Test case for relax

        Asking the arm to relax  # noqa: E501
        """
        pass

    def test_remove_all_from_environment(self):
        """Test case for remove_all_from_environment

        Remove all obstacles from robot environment.  # noqa: E501
        """
        pass

    def test_remove_from_environment_by_name(self):
        """Test case for remove_from_environment_by_name

        Remove obstacle from robot environment by name.  # noqa: E501
        """
        pass

    def test_run_joint_poses(self):
        """Test case for run_joint_poses

        Asking the arm to follow the joint trajectory in Cartesian Space via waypoints represented in poses.  # noqa: E501
        """
        pass

    def test_run_joint_positions(self):
        """Test case for run_joint_positions

        Asking the arm to follow the joint trajectory in Cartesian Space via waypoints represented in positions  # noqa: E501
        """
        pass

    def test_run_linear_poses(self):
        """Test case for run_linear_poses

        Asking the arm to follow the linear trajectory in Cartesian Space via waypoints represented in poses  # noqa: E501
        """
        pass

    def test_run_linear_positions(self):
        """Test case for run_linear_positions

        Asking the arm to follow the linear trajectory in Cartesian Space via waypoints represented in positions  # noqa: E501
        """
        pass

    def test_run_poses(self):
        """Test case for run_poses

        Asking the arm to move to a pose  # noqa: E501
        """
        pass

    def test_run_positions(self):
        """Test case for run_positions

        Asking the arm to move to a position  # noqa: E501
        """
        pass

    def test_set_digital_output_high(self):
        """Test case for set_digital_output_high

        Set high level of digital output signal  # noqa: E501
        """
        pass

    def test_set_digital_output_low(self):
        """Test case for set_digital_output_low

        Set low level of digital output signal  # noqa: E501
        """
        pass

    def test_set_pose(self):
        """Test case for set_pose

        Setting a new arm pose  # noqa: E501
        """
        pass

    def test_set_position(self):
        """Test case for set_position

        Setting a new arm position  # noqa: E501
        """
        pass

    def test_status(self):
        """Test case for status

        Getting the actual robot status  # noqa: E501
        """
        pass

    def test_status_failure(self):
        """Test case for status_failure

        Returns complete list of recent failures  # noqa: E501
        """
        pass

    def test_status_motion(self):
        """Test case for status_motion

        Getting the actual motion status  # noqa: E501
        """
        pass

    def test_status_motors(self):
        """Test case for status_motors

        Getting the actual status of servo motors  # noqa: E501
        """
        pass

    def test_stop(self):
        """Test case for stop

        Asking the arm to go to the \"Protection mode\"  # noqa: E501
        """
        pass

    def test_stop_untwisting(self):
        """Test case for stop_untwisting

        Try to exit from twisted mode  # noqa: E501
        """
        pass

    def test_unbind_stop(self):
        """Test case for unbind_stop

        Unbinds stop from inputs  # noqa: E501
        """
        pass

    def test_zg_off(self):
        """Test case for zg_off

        Disable Freedrive Mode  # noqa: E501
        """
        pass

    def test_zg_on(self):
        """Test case for zg_on

        Enable Freedrive Mode  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
