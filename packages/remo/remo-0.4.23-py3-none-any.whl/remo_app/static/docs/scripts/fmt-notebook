#!/usr/bin/env python
import os
import sys


class Cell:
    indentation = ' ' * 4
    python_begin = '```python'
    python_end = '```'

    def __init__(self, line: str):
        self.is_python_cell = False
        self.is_python_cell_done = False
        self.text = []

        self.add_text(line)

    def add_text(self, line: str):
        if self.is_python_cell_begin(line):
            self.is_python_cell = True

        if self.is_python_cell_end(line):
            self.is_python_cell_done = True

        self.text.append(line)

    def is_empty_line(self, line: str):
        return line.strip() == ''

    def is_indented_line(self, line: str):
        return line.startswith(Cell.indentation)

    def is_output_cell(self):
        return all(
            (self.is_empty_line(line) or self.is_indented_line(line))
            for line in self.text
        )

    def is_python_cell_begin(self, line: str):
        return line.strip() == Cell.python_begin

    def is_python_cell_end(self, line: str):
        return self.is_python_cell and line.strip() == Cell.python_end

    def is_next_line(self, line: str):
        if self.is_output_cell():
            return self.is_indented_line(line) or self.is_empty_line(line)

        if self.is_python_cell_done:
            return line.strip() == ''

        if self.is_python_cell:
            return True

        return not self.is_python_cell_begin(line)

    def fmt(self):
        is_output_cell = self.is_output_cell()
        if is_output_cell:
            for i, line in enumerate(self.text):
                self.text[i] = line.lstrip(Cell.indentation)

        text = ''.join(self.text)
        if is_output_cell:
            text = text.rstrip() + '\n{: .remo__output-code }\n\n'

        return text


def fmt(input_file, output_file):
    print('Apply fmt to', input_file)

    with open(input_file) as in_file:
        cells = split_lines(in_file)

    with open(output_file, mode='w') as out_file:
        for cell in cells:
            out_file.write(cell.fmt())


def split_lines(lines):
    cells = []
    for line in lines:
        if not cells:
            cells.append(Cell(line))
            continue

        if cells[-1].is_next_line(line):
            cells[-1].add_text(line)
            continue

        cells.append(Cell(line))

    return cells


def file_ext(file_path):
    _, ext = os.path.splitext(file_path)
    return ext


if __name__ == '__main__':
    args = sys.argv[1:]

    if len(args) == 2:
        input_file, output_file = args
        if os.path.isfile(input_file):
            fmt(input_file, output_file)

    elif len(args) == 1:
        path = args[0]
        if os.path.isdir(path):
            files = [os.path.join(path, file_name) for file_name in os.listdir(path)]
            md_files = filter(lambda file_path: file_ext(file_path) == '.md', files)
            for md_file in md_files:
                fmt(md_file, md_file)
