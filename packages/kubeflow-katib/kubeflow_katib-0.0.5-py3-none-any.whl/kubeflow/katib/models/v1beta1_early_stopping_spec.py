# coding: utf-8

"""
    Katib

    Swagger description for Katib  # noqa: E501

    OpenAPI spec version: v1beta1-0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from kubeflow.katib.models.v1beta1_early_stopping_setting import V1beta1EarlyStoppingSetting  # noqa: F401,E501


class V1beta1EarlyStoppingSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'early_stopping_algorithm_name': 'str',
        'early_stopping_settings': 'list[V1beta1EarlyStoppingSetting]'
    }

    attribute_map = {
        'early_stopping_algorithm_name': 'earlyStoppingAlgorithmName',
        'early_stopping_settings': 'earlyStoppingSettings'
    }

    def __init__(self, early_stopping_algorithm_name=None, early_stopping_settings=None):  # noqa: E501
        """V1beta1EarlyStoppingSpec - a model defined in Swagger"""  # noqa: E501

        self._early_stopping_algorithm_name = None
        self._early_stopping_settings = None
        self.discriminator = None

        if early_stopping_algorithm_name is not None:
            self.early_stopping_algorithm_name = early_stopping_algorithm_name
        self.early_stopping_settings = early_stopping_settings

    @property
    def early_stopping_algorithm_name(self):
        """Gets the early_stopping_algorithm_name of this V1beta1EarlyStoppingSpec.  # noqa: E501


        :return: The early_stopping_algorithm_name of this V1beta1EarlyStoppingSpec.  # noqa: E501
        :rtype: str
        """
        return self._early_stopping_algorithm_name

    @early_stopping_algorithm_name.setter
    def early_stopping_algorithm_name(self, early_stopping_algorithm_name):
        """Sets the early_stopping_algorithm_name of this V1beta1EarlyStoppingSpec.


        :param early_stopping_algorithm_name: The early_stopping_algorithm_name of this V1beta1EarlyStoppingSpec.  # noqa: E501
        :type: str
        """

        self._early_stopping_algorithm_name = early_stopping_algorithm_name

    @property
    def early_stopping_settings(self):
        """Gets the early_stopping_settings of this V1beta1EarlyStoppingSpec.  # noqa: E501


        :return: The early_stopping_settings of this V1beta1EarlyStoppingSpec.  # noqa: E501
        :rtype: list[V1beta1EarlyStoppingSetting]
        """
        return self._early_stopping_settings

    @early_stopping_settings.setter
    def early_stopping_settings(self, early_stopping_settings):
        """Sets the early_stopping_settings of this V1beta1EarlyStoppingSpec.


        :param early_stopping_settings: The early_stopping_settings of this V1beta1EarlyStoppingSpec.  # noqa: E501
        :type: list[V1beta1EarlyStoppingSetting]
        """
        if early_stopping_settings is None:
            raise ValueError("Invalid value for `early_stopping_settings`, must not be `None`")  # noqa: E501

        self._early_stopping_settings = early_stopping_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1beta1EarlyStoppingSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1EarlyStoppingSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
