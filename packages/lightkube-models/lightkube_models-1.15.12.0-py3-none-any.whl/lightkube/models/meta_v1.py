# autogenerated module
from dataclasses import dataclass, field
from typing import List

from ..core.dataclasses_dict import DataclassDictMixIn

from . import runtime
from typing import Dict
from datetime import datetime


@dataclass
class APIGroup(DataclassDictMixIn):
    name: 'str'
    versions: 'List[GroupVersionForDiscovery]'
    apiVersion: 'str' = None
    kind: 'str' = None
    preferredVersion: 'GroupVersionForDiscovery' = None
    serverAddressByClientCIDRs: 'List[ServerAddressByClientCIDR]' = None


@dataclass
class APIGroupList(DataclassDictMixIn):
    groups: 'List[APIGroup]'
    apiVersion: 'str' = None
    kind: 'str' = None


@dataclass
class APIResource(DataclassDictMixIn):
    kind: 'str'
    name: 'str'
    namespaced: 'bool'
    singularName: 'str'
    verbs: 'List[str]'
    categories: 'List[str]' = None
    group: 'str' = None
    shortNames: 'List[str]' = None
    storageVersionHash: 'str' = None
    version: 'str' = None


@dataclass
class APIResourceList(DataclassDictMixIn):
    groupVersion: 'str'
    resources: 'List[APIResource]'
    apiVersion: 'str' = None
    kind: 'str' = None


@dataclass
class APIVersions(DataclassDictMixIn):
    serverAddressByClientCIDRs: 'List[ServerAddressByClientCIDR]'
    versions: 'List[str]'
    apiVersion: 'str' = None
    kind: 'str' = None


@dataclass
class DeleteOptions(DataclassDictMixIn):
    apiVersion: 'str' = None
    dryRun: 'List[str]' = None
    gracePeriodSeconds: 'int' = None
    kind: 'str' = None
    orphanDependents: 'bool' = None
    preconditions: 'Preconditions' = None
    propagationPolicy: 'str' = None


Fields = Dict


@dataclass
class GroupVersionForDiscovery(DataclassDictMixIn):
    groupVersion: 'str'
    version: 'str'


@dataclass
class Initializer(DataclassDictMixIn):
    name: 'str'


@dataclass
class Initializers(DataclassDictMixIn):
    pending: 'List[Initializer]'
    result: 'Status' = None


@dataclass
class LabelSelector(DataclassDictMixIn):
    matchExpressions: 'List[LabelSelectorRequirement]' = None
    matchLabels: 'dict' = None


@dataclass
class LabelSelectorRequirement(DataclassDictMixIn):
    key: 'str'
    operator: 'str'
    values: 'List[str]' = None


@dataclass
class ListMeta(DataclassDictMixIn):
    continue_: 'str' = field(metadata={"json": "continue"}, default=None)
    remainingItemCount: 'int' = None
    resourceVersion: 'str' = None
    selfLink: 'str' = None


@dataclass
class ManagedFieldsEntry(DataclassDictMixIn):
    apiVersion: 'str' = None
    fields: 'Fields' = None
    manager: 'str' = None
    operation: 'str' = None
    time: 'Time' = None


MicroTime = datetime


@dataclass
class ObjectMeta(DataclassDictMixIn):
    annotations: 'dict' = None
    clusterName: 'str' = None
    creationTimestamp: 'Time' = None
    deletionGracePeriodSeconds: 'int' = None
    deletionTimestamp: 'Time' = None
    finalizers: 'List[str]' = None
    generateName: 'str' = None
    generation: 'int' = None
    initializers: 'Initializers' = None
    labels: 'dict' = None
    managedFields: 'List[ManagedFieldsEntry]' = None
    name: 'str' = None
    namespace: 'str' = None
    ownerReferences: 'List[OwnerReference]' = None
    resourceVersion: 'str' = None
    selfLink: 'str' = None
    uid: 'str' = None


@dataclass
class OwnerReference(DataclassDictMixIn):
    apiVersion: 'str'
    kind: 'str'
    name: 'str'
    uid: 'str'
    blockOwnerDeletion: 'bool' = None
    controller: 'bool' = None


Patch = Dict


@dataclass
class Preconditions(DataclassDictMixIn):
    resourceVersion: 'str' = None
    uid: 'str' = None


@dataclass
class ServerAddressByClientCIDR(DataclassDictMixIn):
    clientCIDR: 'str'
    serverAddress: 'str'


@dataclass
class Status(DataclassDictMixIn):
    apiVersion: 'str' = None
    code: 'int' = None
    details: 'StatusDetails' = None
    kind: 'str' = None
    message: 'str' = None
    metadata: 'ListMeta' = None
    reason: 'str' = None
    status: 'str' = None


@dataclass
class StatusCause(DataclassDictMixIn):
    field: 'str' = None
    message: 'str' = None
    reason: 'str' = None


@dataclass
class StatusDetails(DataclassDictMixIn):
    causes: 'List[StatusCause]' = None
    group: 'str' = None
    kind: 'str' = None
    name: 'str' = None
    retryAfterSeconds: 'int' = None
    uid: 'str' = None


Time = datetime


@dataclass
class WatchEvent(DataclassDictMixIn):
    object: 'runtime.RawExtension'
    type: 'str'


