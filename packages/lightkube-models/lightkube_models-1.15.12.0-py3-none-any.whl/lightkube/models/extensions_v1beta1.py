# autogenerated module
from dataclasses import dataclass, field
from typing import List

from ..core.dataclasses_dict import DataclassDictMixIn

from . import core_v1
from . import meta_v1
from . import util_intstr


@dataclass
class AllowedCSIDriver(DataclassDictMixIn):
    name: 'str'


@dataclass
class AllowedFlexVolume(DataclassDictMixIn):
    driver: 'str'


@dataclass
class AllowedHostPath(DataclassDictMixIn):
    pathPrefix: 'str' = None
    readOnly: 'bool' = None


@dataclass
class DaemonSet(DataclassDictMixIn):
    apiVersion: 'str' = None
    kind: 'str' = None
    metadata: 'meta_v1.ObjectMeta' = None
    spec: 'DaemonSetSpec' = None
    status: 'DaemonSetStatus' = None


@dataclass
class DaemonSetCondition(DataclassDictMixIn):
    status: 'str'
    type: 'str'
    lastTransitionTime: 'meta_v1.Time' = None
    message: 'str' = None
    reason: 'str' = None


@dataclass
class DaemonSetList(DataclassDictMixIn):
    items: 'List[DaemonSet]'
    apiVersion: 'str' = None
    kind: 'str' = None
    metadata: 'meta_v1.ListMeta' = None


@dataclass
class DaemonSetSpec(DataclassDictMixIn):
    template: 'core_v1.PodTemplateSpec'
    minReadySeconds: 'int' = None
    revisionHistoryLimit: 'int' = None
    selector: 'meta_v1.LabelSelector' = None
    templateGeneration: 'int' = None
    updateStrategy: 'DaemonSetUpdateStrategy' = None


@dataclass
class DaemonSetStatus(DataclassDictMixIn):
    currentNumberScheduled: 'int'
    desiredNumberScheduled: 'int'
    numberMisscheduled: 'int'
    numberReady: 'int'
    collisionCount: 'int' = None
    conditions: 'List[DaemonSetCondition]' = None
    numberAvailable: 'int' = None
    numberUnavailable: 'int' = None
    observedGeneration: 'int' = None
    updatedNumberScheduled: 'int' = None


@dataclass
class DaemonSetUpdateStrategy(DataclassDictMixIn):
    rollingUpdate: 'RollingUpdateDaemonSet' = None
    type: 'str' = None


@dataclass
class Deployment(DataclassDictMixIn):
    apiVersion: 'str' = None
    kind: 'str' = None
    metadata: 'meta_v1.ObjectMeta' = None
    spec: 'DeploymentSpec' = None
    status: 'DeploymentStatus' = None


@dataclass
class DeploymentCondition(DataclassDictMixIn):
    status: 'str'
    type: 'str'
    lastTransitionTime: 'meta_v1.Time' = None
    lastUpdateTime: 'meta_v1.Time' = None
    message: 'str' = None
    reason: 'str' = None


@dataclass
class DeploymentList(DataclassDictMixIn):
    items: 'List[Deployment]'
    apiVersion: 'str' = None
    kind: 'str' = None
    metadata: 'meta_v1.ListMeta' = None


@dataclass
class DeploymentRollback(DataclassDictMixIn):
    name: 'str'
    rollbackTo: 'RollbackConfig'
    apiVersion: 'str' = None
    kind: 'str' = None
    updatedAnnotations: 'dict' = None


@dataclass
class DeploymentSpec(DataclassDictMixIn):
    template: 'core_v1.PodTemplateSpec'
    minReadySeconds: 'int' = None
    paused: 'bool' = None
    progressDeadlineSeconds: 'int' = None
    replicas: 'int' = None
    revisionHistoryLimit: 'int' = None
    rollbackTo: 'RollbackConfig' = None
    selector: 'meta_v1.LabelSelector' = None
    strategy: 'DeploymentStrategy' = None


@dataclass
class DeploymentStatus(DataclassDictMixIn):
    availableReplicas: 'int' = None
    collisionCount: 'int' = None
    conditions: 'List[DeploymentCondition]' = None
    observedGeneration: 'int' = None
    readyReplicas: 'int' = None
    replicas: 'int' = None
    unavailableReplicas: 'int' = None
    updatedReplicas: 'int' = None


@dataclass
class DeploymentStrategy(DataclassDictMixIn):
    rollingUpdate: 'RollingUpdateDeployment' = None
    type: 'str' = None


@dataclass
class FSGroupStrategyOptions(DataclassDictMixIn):
    ranges: 'List[IDRange]' = None
    rule: 'str' = None


@dataclass
class HTTPIngressPath(DataclassDictMixIn):
    backend: 'IngressBackend'
    path: 'str' = None


@dataclass
class HTTPIngressRuleValue(DataclassDictMixIn):
    paths: 'List[HTTPIngressPath]'


@dataclass
class HostPortRange(DataclassDictMixIn):
    max: 'int'
    min: 'int'


@dataclass
class IDRange(DataclassDictMixIn):
    max: 'int'
    min: 'int'


@dataclass
class IPBlock(DataclassDictMixIn):
    cidr: 'str'
    except_: 'List[str]' = field(metadata={"json": "except"}, default=None)


@dataclass
class Ingress(DataclassDictMixIn):
    apiVersion: 'str' = None
    kind: 'str' = None
    metadata: 'meta_v1.ObjectMeta' = None
    spec: 'IngressSpec' = None
    status: 'IngressStatus' = None


@dataclass
class IngressBackend(DataclassDictMixIn):
    serviceName: 'str'
    servicePort: 'util_intstr.IntOrString'


@dataclass
class IngressList(DataclassDictMixIn):
    items: 'List[Ingress]'
    apiVersion: 'str' = None
    kind: 'str' = None
    metadata: 'meta_v1.ListMeta' = None


@dataclass
class IngressRule(DataclassDictMixIn):
    host: 'str' = None
    http: 'HTTPIngressRuleValue' = None


@dataclass
class IngressSpec(DataclassDictMixIn):
    backend: 'IngressBackend' = None
    rules: 'List[IngressRule]' = None
    tls: 'List[IngressTLS]' = None


@dataclass
class IngressStatus(DataclassDictMixIn):
    loadBalancer: 'core_v1.LoadBalancerStatus' = None


@dataclass
class IngressTLS(DataclassDictMixIn):
    hosts: 'List[str]' = None
    secretName: 'str' = None


@dataclass
class NetworkPolicy(DataclassDictMixIn):
    apiVersion: 'str' = None
    kind: 'str' = None
    metadata: 'meta_v1.ObjectMeta' = None
    spec: 'NetworkPolicySpec' = None


@dataclass
class NetworkPolicyEgressRule(DataclassDictMixIn):
    ports: 'List[NetworkPolicyPort]' = None
    to: 'List[NetworkPolicyPeer]' = None


@dataclass
class NetworkPolicyIngressRule(DataclassDictMixIn):
    from_: 'List[NetworkPolicyPeer]' = field(metadata={"json": "from"}, default=None)
    ports: 'List[NetworkPolicyPort]' = None


@dataclass
class NetworkPolicyList(DataclassDictMixIn):
    items: 'List[NetworkPolicy]'
    apiVersion: 'str' = None
    kind: 'str' = None
    metadata: 'meta_v1.ListMeta' = None


@dataclass
class NetworkPolicyPeer(DataclassDictMixIn):
    ipBlock: 'IPBlock' = None
    namespaceSelector: 'meta_v1.LabelSelector' = None
    podSelector: 'meta_v1.LabelSelector' = None


@dataclass
class NetworkPolicyPort(DataclassDictMixIn):
    port: 'util_intstr.IntOrString' = None
    protocol: 'str' = None


@dataclass
class NetworkPolicySpec(DataclassDictMixIn):
    podSelector: 'meta_v1.LabelSelector'
    egress: 'List[NetworkPolicyEgressRule]' = None
    ingress: 'List[NetworkPolicyIngressRule]' = None
    policyTypes: 'List[str]' = None


@dataclass
class PodSecurityPolicy(DataclassDictMixIn):
    apiVersion: 'str' = None
    kind: 'str' = None
    metadata: 'meta_v1.ObjectMeta' = None
    spec: 'PodSecurityPolicySpec' = None


@dataclass
class PodSecurityPolicyList(DataclassDictMixIn):
    items: 'List[PodSecurityPolicy]'
    apiVersion: 'str' = None
    kind: 'str' = None
    metadata: 'meta_v1.ListMeta' = None


@dataclass
class PodSecurityPolicySpec(DataclassDictMixIn):
    fsGroup: 'FSGroupStrategyOptions'
    runAsUser: 'RunAsUserStrategyOptions'
    seLinux: 'SELinuxStrategyOptions'
    supplementalGroups: 'SupplementalGroupsStrategyOptions'
    allowPrivilegeEscalation: 'bool' = None
    allowedCSIDrivers: 'List[AllowedCSIDriver]' = None
    allowedCapabilities: 'List[str]' = None
    allowedFlexVolumes: 'List[AllowedFlexVolume]' = None
    allowedHostPaths: 'List[AllowedHostPath]' = None
    allowedProcMountTypes: 'List[str]' = None
    allowedUnsafeSysctls: 'List[str]' = None
    defaultAddCapabilities: 'List[str]' = None
    defaultAllowPrivilegeEscalation: 'bool' = None
    forbiddenSysctls: 'List[str]' = None
    hostIPC: 'bool' = None
    hostNetwork: 'bool' = None
    hostPID: 'bool' = None
    hostPorts: 'List[HostPortRange]' = None
    privileged: 'bool' = None
    readOnlyRootFilesystem: 'bool' = None
    requiredDropCapabilities: 'List[str]' = None
    runAsGroup: 'RunAsGroupStrategyOptions' = None
    runtimeClass: 'RuntimeClassStrategyOptions' = None
    volumes: 'List[str]' = None


@dataclass
class ReplicaSet(DataclassDictMixIn):
    apiVersion: 'str' = None
    kind: 'str' = None
    metadata: 'meta_v1.ObjectMeta' = None
    spec: 'ReplicaSetSpec' = None
    status: 'ReplicaSetStatus' = None


@dataclass
class ReplicaSetCondition(DataclassDictMixIn):
    status: 'str'
    type: 'str'
    lastTransitionTime: 'meta_v1.Time' = None
    message: 'str' = None
    reason: 'str' = None


@dataclass
class ReplicaSetList(DataclassDictMixIn):
    items: 'List[ReplicaSet]'
    apiVersion: 'str' = None
    kind: 'str' = None
    metadata: 'meta_v1.ListMeta' = None


@dataclass
class ReplicaSetSpec(DataclassDictMixIn):
    minReadySeconds: 'int' = None
    replicas: 'int' = None
    selector: 'meta_v1.LabelSelector' = None
    template: 'core_v1.PodTemplateSpec' = None


@dataclass
class ReplicaSetStatus(DataclassDictMixIn):
    replicas: 'int'
    availableReplicas: 'int' = None
    conditions: 'List[ReplicaSetCondition]' = None
    fullyLabeledReplicas: 'int' = None
    observedGeneration: 'int' = None
    readyReplicas: 'int' = None


@dataclass
class RollbackConfig(DataclassDictMixIn):
    revision: 'int' = None


@dataclass
class RollingUpdateDaemonSet(DataclassDictMixIn):
    maxUnavailable: 'util_intstr.IntOrString' = None


@dataclass
class RollingUpdateDeployment(DataclassDictMixIn):
    maxSurge: 'util_intstr.IntOrString' = None
    maxUnavailable: 'util_intstr.IntOrString' = None


@dataclass
class RunAsGroupStrategyOptions(DataclassDictMixIn):
    rule: 'str'
    ranges: 'List[IDRange]' = None


@dataclass
class RunAsUserStrategyOptions(DataclassDictMixIn):
    rule: 'str'
    ranges: 'List[IDRange]' = None


@dataclass
class RuntimeClassStrategyOptions(DataclassDictMixIn):
    allowedRuntimeClassNames: 'List[str]'
    defaultRuntimeClassName: 'str' = None


@dataclass
class SELinuxStrategyOptions(DataclassDictMixIn):
    rule: 'str'
    seLinuxOptions: 'core_v1.SELinuxOptions' = None


@dataclass
class Scale(DataclassDictMixIn):
    apiVersion: 'str' = None
    kind: 'str' = None
    metadata: 'meta_v1.ObjectMeta' = None
    spec: 'ScaleSpec' = None
    status: 'ScaleStatus' = None


@dataclass
class ScaleSpec(DataclassDictMixIn):
    replicas: 'int' = None


@dataclass
class ScaleStatus(DataclassDictMixIn):
    replicas: 'int'
    selector: 'dict' = None
    targetSelector: 'str' = None


@dataclass
class SupplementalGroupsStrategyOptions(DataclassDictMixIn):
    ranges: 'List[IDRange]' = None
    rule: 'str' = None


