# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _swigvearch
else:
    import _swigvearch

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


VEARCH_VERSION_MAJOR = _swigvearch.VEARCH_VERSION_MAJOR
VEARCH_VERSION_MINOR = _swigvearch.VEARCH_VERSION_MINOR
VEARCH_VERSION_PATCH = _swigvearch.VEARCH_VERSION_PATCH
TRUE = _swigvearch.TRUE
FALSE = _swigvearch.FALSE
class ByteArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    value = property(_swigvearch.ByteArray_value_get, _swigvearch.ByteArray_value_set)
    len = property(_swigvearch.ByteArray_len_get, _swigvearch.ByteArray_len_set)

    def __init__(self):
        _swigvearch.ByteArray_swiginit(self, _swigvearch.new_ByteArray())
    __swig_destroy__ = _swigvearch.delete_ByteArray

# Register ByteArray in _swigvearch:
_swigvearch.ByteArray_swigregister(ByteArray)


def MakeByteArrays(num):
    return _swigvearch.MakeByteArrays(num)

def MakeByteArray(value, len):
    return _swigvearch.MakeByteArray(value, len)

def SetByteArray(byte_arrays, idx, byte_array):
    return _swigvearch.SetByteArray(byte_arrays, idx, byte_array)

def DestroyByteArray(byteArray):
    return _swigvearch.DestroyByteArray(byteArray)

def DestroyByteArrays(byte_arrays, num):
    return _swigvearch.DestroyByteArrays(byte_arrays, num)
class Config(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    path = property(_swigvearch.Config_path_get, _swigvearch.Config_path_set)
    max_doc_size = property(_swigvearch.Config_max_doc_size_get, _swigvearch.Config_max_doc_size_set)

    def __init__(self):
        _swigvearch.Config_swiginit(self, _swigvearch.new_Config())
    __swig_destroy__ = _swigvearch.delete_Config

# Register Config in _swigvearch:
_swigvearch.Config_swigregister(Config)


def DestroyConfig(config):
    return _swigvearch.DestroyConfig(config)
class VectorInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_swigvearch.VectorInfo_name_get, _swigvearch.VectorInfo_name_set)
    data_type = property(_swigvearch.VectorInfo_data_type_get, _swigvearch.VectorInfo_data_type_set)
    is_index = property(_swigvearch.VectorInfo_is_index_get, _swigvearch.VectorInfo_is_index_set)
    dimension = property(_swigvearch.VectorInfo_dimension_get, _swigvearch.VectorInfo_dimension_set)
    model_id = property(_swigvearch.VectorInfo_model_id_get, _swigvearch.VectorInfo_model_id_set)
    retrieval_type = property(_swigvearch.VectorInfo_retrieval_type_get, _swigvearch.VectorInfo_retrieval_type_set)
    store_type = property(_swigvearch.VectorInfo_store_type_get, _swigvearch.VectorInfo_store_type_set)
    store_param = property(_swigvearch.VectorInfo_store_param_get, _swigvearch.VectorInfo_store_param_set)

    def __init__(self):
        _swigvearch.VectorInfo_swiginit(self, _swigvearch.new_VectorInfo())
    __swig_destroy__ = _swigvearch.delete_VectorInfo

# Register VectorInfo in _swigvearch:
_swigvearch.VectorInfo_swigregister(VectorInfo)


def MakeVectorInfos(num):
    return _swigvearch.MakeVectorInfos(num)

def SetVectorInfo(vector_infos, idx, vector_info):
    return _swigvearch.SetVectorInfo(vector_infos, idx, vector_info)

def DestroyVectorInfos(vectorInfo, num):
    return _swigvearch.DestroyVectorInfos(vectorInfo, num)
class FieldInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_swigvearch.FieldInfo_name_get, _swigvearch.FieldInfo_name_set)
    data_type = property(_swigvearch.FieldInfo_data_type_get, _swigvearch.FieldInfo_data_type_set)
    is_index = property(_swigvearch.FieldInfo_is_index_get, _swigvearch.FieldInfo_is_index_set)

    def __init__(self):
        _swigvearch.FieldInfo_swiginit(self, _swigvearch.new_FieldInfo())
    __swig_destroy__ = _swigvearch.delete_FieldInfo

# Register FieldInfo in _swigvearch:
_swigvearch.FieldInfo_swigregister(FieldInfo)


def MakeFieldInfos(num):
    return _swigvearch.MakeFieldInfos(num)

def MakeFieldInfo(name, data_type, is_index):
    return _swigvearch.MakeFieldInfo(name, data_type, is_index)

def SetFieldInfo(field_infos, idx, field_info):
    return _swigvearch.SetFieldInfo(field_infos, idx, field_info)

def DestroyFieldInfos(field_infos, num):
    return _swigvearch.DestroyFieldInfos(field_infos, num)
class Field(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_swigvearch.Field_name_get, _swigvearch.Field_name_set)
    value = property(_swigvearch.Field_value_get, _swigvearch.Field_value_set)
    source = property(_swigvearch.Field_source_get, _swigvearch.Field_source_set)
    data_type = property(_swigvearch.Field_data_type_get, _swigvearch.Field_data_type_set)

    def __init__(self):
        _swigvearch.Field_swiginit(self, _swigvearch.new_Field())
    __swig_destroy__ = _swigvearch.delete_Field

# Register Field in _swigvearch:
_swigvearch.Field_swigregister(Field)


def MakeFields(num):
    return _swigvearch.MakeFields(num)

def SetField(fields, idx, field):
    return _swigvearch.SetField(fields, idx, field)

def DestroyField(field):
    return _swigvearch.DestroyField(field)

def DestroyFields(fields, num):
    return _swigvearch.DestroyFields(fields, num)
class IVFPQParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    metric_type = property(_swigvearch.IVFPQParameters_metric_type_get, _swigvearch.IVFPQParameters_metric_type_set)
    nprobe = property(_swigvearch.IVFPQParameters_nprobe_get, _swigvearch.IVFPQParameters_nprobe_set)
    ncentroids = property(_swigvearch.IVFPQParameters_ncentroids_get, _swigvearch.IVFPQParameters_ncentroids_set)
    nsubvector = property(_swigvearch.IVFPQParameters_nsubvector_get, _swigvearch.IVFPQParameters_nsubvector_set)
    nbits_per_idx = property(_swigvearch.IVFPQParameters_nbits_per_idx_get, _swigvearch.IVFPQParameters_nbits_per_idx_set)

    def __init__(self):
        _swigvearch.IVFPQParameters_swiginit(self, _swigvearch.new_IVFPQParameters())
    __swig_destroy__ = _swigvearch.delete_IVFPQParameters

# Register IVFPQParameters in _swigvearch:
_swigvearch.IVFPQParameters_swigregister(IVFPQParameters)


def MakeIVFPQParameters(metric_type, nprobe, ncentroids, nsubvector, nbits_per_idx):
    return _swigvearch.MakeIVFPQParameters(metric_type, nprobe, ncentroids, nsubvector, nbits_per_idx)

def DestroyIVFPQParameters(param):
    return _swigvearch.DestroyIVFPQParameters(param)
class Table(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_swigvearch.Table_name_get, _swigvearch.Table_name_set)
    fields = property(_swigvearch.Table_fields_get, _swigvearch.Table_fields_set)
    fields_num = property(_swigvearch.Table_fields_num_get, _swigvearch.Table_fields_num_set)
    vectors_info = property(_swigvearch.Table_vectors_info_get, _swigvearch.Table_vectors_info_set)
    vectors_num = property(_swigvearch.Table_vectors_num_get, _swigvearch.Table_vectors_num_set)
    ivfpq_param = property(_swigvearch.Table_ivfpq_param_get, _swigvearch.Table_ivfpq_param_set)

    def __init__(self):
        _swigvearch.Table_swiginit(self, _swigvearch.new_Table())
    __swig_destroy__ = _swigvearch.delete_Table

# Register Table in _swigvearch:
_swigvearch.Table_swigregister(Table)


def MakeTable(name, fields, fields_num, vectors_info, vectors_num, ivfpq_param):
    return _swigvearch.MakeTable(name, fields, fields_num, vectors_info, vectors_num, ivfpq_param)

def DestroyTable(table):
    return _swigvearch.DestroyTable(table)
class Doc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fields = property(_swigvearch.Doc_fields_get, _swigvearch.Doc_fields_set)
    fields_num = property(_swigvearch.Doc_fields_num_get, _swigvearch.Doc_fields_num_set)

    def __init__(self):
        _swigvearch.Doc_swiginit(self, _swigvearch.new_Doc())
    __swig_destroy__ = _swigvearch.delete_Doc

# Register Doc in _swigvearch:
_swigvearch.Doc_swigregister(Doc)


def MakeDoc(fields, fields_num):
    return _swigvearch.MakeDoc(fields, fields_num)

def DestroyDoc(doc):
    return _swigvearch.DestroyDoc(doc)

def SetLogDictionary(log_dir):
    return _swigvearch.SetLogDictionary(log_dir)

def CreateTable(engine, table):
    return _swigvearch.CreateTable(engine, table)

def AddDoc(engine, doc):
    return _swigvearch.AddDoc(engine, doc)

def BinaryAddDoc(engine, doc):
    return _swigvearch.BinaryAddDoc(engine, doc)

def AddOrUpdateDoc(engine, doc):
    return _swigvearch.AddOrUpdateDoc(engine, doc)

def UpdateDoc(engine, doc):
    return _swigvearch.UpdateDoc(engine, doc)

def DelDoc(engine, doc_id):
    return _swigvearch.DelDoc(engine, doc_id)

def GetDocsNum(engine):
    return _swigvearch.GetDocsNum(engine)

def GetMemoryBytes(engine):
    return _swigvearch.GetMemoryBytes(engine)

def GetDocByID(engine, doc_id):
    return _swigvearch.GetDocByID(engine, doc_id)

def BuildIndex(engine):
    return _swigvearch.BuildIndex(engine)

def GetIndexStatus(engine):
    return _swigvearch.GetIndexStatus(engine)

def Dump(engine):
    return _swigvearch.Dump(engine)

def Load(engine):
    return _swigvearch.Load(engine)
class RangeFilter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    field = property(_swigvearch.RangeFilter_field_get, _swigvearch.RangeFilter_field_set)
    lower_value = property(_swigvearch.RangeFilter_lower_value_get, _swigvearch.RangeFilter_lower_value_set)
    upper_value = property(_swigvearch.RangeFilter_upper_value_get, _swigvearch.RangeFilter_upper_value_set)
    include_lower = property(_swigvearch.RangeFilter_include_lower_get, _swigvearch.RangeFilter_include_lower_set)
    include_upper = property(_swigvearch.RangeFilter_include_upper_get, _swigvearch.RangeFilter_include_upper_set)

    def __init__(self):
        _swigvearch.RangeFilter_swiginit(self, _swigvearch.new_RangeFilter())
    __swig_destroy__ = _swigvearch.delete_RangeFilter

# Register RangeFilter in _swigvearch:
_swigvearch.RangeFilter_swigregister(RangeFilter)


def MakeRangeFilters(num):
    return _swigvearch.MakeRangeFilters(num)

def MakeRangeFilter(field, lower_value, upper_value, include_lower, include_upper):
    return _swigvearch.MakeRangeFilter(field, lower_value, upper_value, include_lower, include_upper)

def SetRangeFilter(range_filters, idx, range_filter):
    return _swigvearch.SetRangeFilter(range_filters, idx, range_filter)

def DestroyRangeFilter(range_filter):
    return _swigvearch.DestroyRangeFilter(range_filter)

def DestroyRangeFilters(range_filters, num):
    return _swigvearch.DestroyRangeFilters(range_filters, num)
class TermFilter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    field = property(_swigvearch.TermFilter_field_get, _swigvearch.TermFilter_field_set)
    value = property(_swigvearch.TermFilter_value_get, _swigvearch.TermFilter_value_set)
    is_union = property(_swigvearch.TermFilter_is_union_get, _swigvearch.TermFilter_is_union_set)

    def __init__(self):
        _swigvearch.TermFilter_swiginit(self, _swigvearch.new_TermFilter())
    __swig_destroy__ = _swigvearch.delete_TermFilter

# Register TermFilter in _swigvearch:
_swigvearch.TermFilter_swigregister(TermFilter)


def MakeTermFilters(num):
    return _swigvearch.MakeTermFilters(num)

def MakeTermFilter(field, value, is_union):
    return _swigvearch.MakeTermFilter(field, value, is_union)

def SetTermFilter(term_filters, idx, term_filter):
    return _swigvearch.SetTermFilter(term_filters, idx, term_filter)

def DestroyTermFilter(term_filter):
    return _swigvearch.DestroyTermFilter(term_filter)

def DestroyTermFilters(term_filters, num):
    return _swigvearch.DestroyTermFilters(term_filters, num)
class VectorQuery(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_swigvearch.VectorQuery_name_get, _swigvearch.VectorQuery_name_set)
    value = property(_swigvearch.VectorQuery_value_get, _swigvearch.VectorQuery_value_set)
    min_score = property(_swigvearch.VectorQuery_min_score_get, _swigvearch.VectorQuery_min_score_set)
    max_score = property(_swigvearch.VectorQuery_max_score_get, _swigvearch.VectorQuery_max_score_set)
    boost = property(_swigvearch.VectorQuery_boost_get, _swigvearch.VectorQuery_boost_set)
    has_boost = property(_swigvearch.VectorQuery_has_boost_get, _swigvearch.VectorQuery_has_boost_set)

    def __init__(self):
        _swigvearch.VectorQuery_swiginit(self, _swigvearch.new_VectorQuery())
    __swig_destroy__ = _swigvearch.delete_VectorQuery

# Register VectorQuery in _swigvearch:
_swigvearch.VectorQuery_swigregister(VectorQuery)


def MakeVectorQuery(name, value, min_score, max_score, boost, has_boost):
    return _swigvearch.MakeVectorQuery(name, value, min_score, max_score, boost, has_boost)

def MakeVectorQuerys(num):
    return _swigvearch.MakeVectorQuerys(num)

def SetVectorQuery(vector_querys, idx, vector_query):
    return _swigvearch.SetVectorQuery(vector_querys, idx, vector_query)

def DestroyVectorQuery(vector_query):
    return _swigvearch.DestroyVectorQuery(vector_query)

def DestroyVectorQuerys(vector_querys, num):
    return _swigvearch.DestroyVectorQuerys(vector_querys, num)
class Request(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    req_num = property(_swigvearch.Request_req_num_get, _swigvearch.Request_req_num_set)
    topn = property(_swigvearch.Request_topn_get, _swigvearch.Request_topn_set)
    direct_search_type = property(_swigvearch.Request_direct_search_type_get, _swigvearch.Request_direct_search_type_set)
    vec_fields = property(_swigvearch.Request_vec_fields_get, _swigvearch.Request_vec_fields_set)
    vec_fields_num = property(_swigvearch.Request_vec_fields_num_get, _swigvearch.Request_vec_fields_num_set)
    fields = property(_swigvearch.Request_fields_get, _swigvearch.Request_fields_set)
    fields_num = property(_swigvearch.Request_fields_num_get, _swigvearch.Request_fields_num_set)
    range_filters = property(_swigvearch.Request_range_filters_get, _swigvearch.Request_range_filters_set)
    range_filters_num = property(_swigvearch.Request_range_filters_num_get, _swigvearch.Request_range_filters_num_set)
    term_filters = property(_swigvearch.Request_term_filters_get, _swigvearch.Request_term_filters_set)
    term_filters_num = property(_swigvearch.Request_term_filters_num_get, _swigvearch.Request_term_filters_num_set)
    metric_type = property(_swigvearch.Request_metric_type_get, _swigvearch.Request_metric_type_set)
    online_log_level = property(_swigvearch.Request_online_log_level_get, _swigvearch.Request_online_log_level_set)
    has_rank = property(_swigvearch.Request_has_rank_get, _swigvearch.Request_has_rank_set)
    multi_vector_rank = property(_swigvearch.Request_multi_vector_rank_get, _swigvearch.Request_multi_vector_rank_set)
    parallel_based_on_query = property(_swigvearch.Request_parallel_based_on_query_get, _swigvearch.Request_parallel_based_on_query_set)

    def __init__(self):
        _swigvearch.Request_swiginit(self, _swigvearch.new_Request())
    __swig_destroy__ = _swigvearch.delete_Request

# Register Request in _swigvearch:
_swigvearch.Request_swigregister(Request)

class BinaryRequest(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    req_num = property(_swigvearch.BinaryRequest_req_num_get, _swigvearch.BinaryRequest_req_num_set)
    topn = property(_swigvearch.BinaryRequest_topn_get, _swigvearch.BinaryRequest_topn_set)
    vec_id = property(_swigvearch.BinaryRequest_vec_id_get, _swigvearch.BinaryRequest_vec_id_set)
    xa = property(_swigvearch.BinaryRequest_xa_get, _swigvearch.BinaryRequest_xa_set)
    xb = property(_swigvearch.BinaryRequest_xb_get, _swigvearch.BinaryRequest_xb_set)
    d = property(_swigvearch.BinaryRequest_d_get, _swigvearch.BinaryRequest_d_set)
    direct_search_type = property(_swigvearch.BinaryRequest_direct_search_type_get, _swigvearch.BinaryRequest_direct_search_type_set)
    vec_fields = property(_swigvearch.BinaryRequest_vec_fields_get, _swigvearch.BinaryRequest_vec_fields_set)
    vec_fields_num = property(_swigvearch.BinaryRequest_vec_fields_num_get, _swigvearch.BinaryRequest_vec_fields_num_set)
    fields = property(_swigvearch.BinaryRequest_fields_get, _swigvearch.BinaryRequest_fields_set)
    fields_num = property(_swigvearch.BinaryRequest_fields_num_get, _swigvearch.BinaryRequest_fields_num_set)
    range_filters = property(_swigvearch.BinaryRequest_range_filters_get, _swigvearch.BinaryRequest_range_filters_set)
    range_filters_num = property(_swigvearch.BinaryRequest_range_filters_num_get, _swigvearch.BinaryRequest_range_filters_num_set)
    term_filters = property(_swigvearch.BinaryRequest_term_filters_get, _swigvearch.BinaryRequest_term_filters_set)
    term_filters_num = property(_swigvearch.BinaryRequest_term_filters_num_get, _swigvearch.BinaryRequest_term_filters_num_set)
    metric_type = property(_swigvearch.BinaryRequest_metric_type_get, _swigvearch.BinaryRequest_metric_type_set)
    online_log_level = property(_swigvearch.BinaryRequest_online_log_level_get, _swigvearch.BinaryRequest_online_log_level_set)
    has_rank = property(_swigvearch.BinaryRequest_has_rank_get, _swigvearch.BinaryRequest_has_rank_set)
    multi_vector_rank = property(_swigvearch.BinaryRequest_multi_vector_rank_get, _swigvearch.BinaryRequest_multi_vector_rank_set)
    parallel_based_on_query = property(_swigvearch.BinaryRequest_parallel_based_on_query_get, _swigvearch.BinaryRequest_parallel_based_on_query_set)

    def __init__(self):
        _swigvearch.BinaryRequest_swiginit(self, _swigvearch.new_BinaryRequest())
    __swig_destroy__ = _swigvearch.delete_BinaryRequest

# Register BinaryRequest in _swigvearch:
_swigvearch.BinaryRequest_swigregister(BinaryRequest)


def MakeRequest(topn, vec_fields, vec_fields_num, fields, fields_num, range_filters, range_filters_num, term_filters, term_filters_num, req_num, direct_search_type, online_log_level, has_rank, multi_vector_rank, parallel_based_on_query):
    return _swigvearch.MakeRequest(topn, vec_fields, vec_fields_num, fields, fields_num, range_filters, range_filters_num, term_filters, term_filters_num, req_num, direct_search_type, online_log_level, has_rank, multi_vector_rank, parallel_based_on_query)

def DestroyRequest(request):
    return _swigvearch.DestroyRequest(request)

def MakeBinaryRequest(n, xa, xb, d, vec_id, vec_fields, vec_fields_num):
    return _swigvearch.MakeBinaryRequest(n, xa, xb, d, vec_id, vec_fields, vec_fields_num)

def DestroyBinaryRequest(request):
    return _swigvearch.DestroyBinaryRequest(request)

def GetBinaryVector(engine, vec_id):
    return _swigvearch.GetBinaryVector(engine, vec_id)
class ResultItem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    score = property(_swigvearch.ResultItem_score_get, _swigvearch.ResultItem_score_set)
    doc = property(_swigvearch.ResultItem_doc_get, _swigvearch.ResultItem_doc_set)
    extra = property(_swigvearch.ResultItem_extra_get, _swigvearch.ResultItem_extra_set)

    def __init__(self):
        _swigvearch.ResultItem_swiginit(self, _swigvearch.new_ResultItem())
    __swig_destroy__ = _swigvearch.delete_ResultItem

# Register ResultItem in _swigvearch:
_swigvearch.ResultItem_swigregister(ResultItem)

class SearchResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    total = property(_swigvearch.SearchResult_total_get, _swigvearch.SearchResult_total_set)
    result_num = property(_swigvearch.SearchResult_result_num_get, _swigvearch.SearchResult_result_num_set)
    result_code = property(_swigvearch.SearchResult_result_code_get, _swigvearch.SearchResult_result_code_set)
    msg = property(_swigvearch.SearchResult_msg_get, _swigvearch.SearchResult_msg_set)
    result_items = property(_swigvearch.SearchResult_result_items_get, _swigvearch.SearchResult_result_items_set)

    def __init__(self):
        _swigvearch.SearchResult_swiginit(self, _swigvearch.new_SearchResult())
    __swig_destroy__ = _swigvearch.delete_SearchResult

# Register SearchResult in _swigvearch:
_swigvearch.SearchResult_swigregister(SearchResult)

class Response(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    req_num = property(_swigvearch.Response_req_num_get, _swigvearch.Response_req_num_set)
    results = property(_swigvearch.Response_results_get, _swigvearch.Response_results_set)
    online_log_message = property(_swigvearch.Response_online_log_message_get, _swigvearch.Response_online_log_message_set)

    def __init__(self):
        _swigvearch.Response_swiginit(self, _swigvearch.new_Response())
    __swig_destroy__ = _swigvearch.delete_Response

# Register Response in _swigvearch:
_swigvearch.Response_swigregister(Response)


def Search(engine, request):
    return _swigvearch.Search(engine, request)

def BinarySearch(engine, request):
    return _swigvearch.BinarySearch(engine, request)

def SearchV2(engine, request):
    return _swigvearch.SearchV2(engine, request)

def DelDocByQuery(engine, request):
    return _swigvearch.DelDocByQuery(engine, request)

def GetSearchResult(response, idx):
    return _swigvearch.GetSearchResult(response, idx)

def GetResultItem(search_result, idx):
    return _swigvearch.GetResultItem(search_result, idx)

def GetField(doc, idx):
    return _swigvearch.GetField(doc, idx)

def DestroyResponse(response):
    return _swigvearch.DestroyResponse(response)
class ResponseCodes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SUCCESSED = _swigvearch.ResponseCodes_SUCCESSED
    FAILED = _swigvearch.ResponseCodes_FAILED

    def __init__(self):
        _swigvearch.ResponseCodes_swiginit(self, _swigvearch.new_ResponseCodes())
    __swig_destroy__ = _swigvearch.delete_ResponseCodes

# Register ResponseCodes in _swigvearch:
_swigvearch.ResponseCodes_swigregister(ResponseCodes)

class DistanceMetricTypes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    InnerProduct = _swigvearch.DistanceMetricTypes_InnerProduct
    L2 = _swigvearch.DistanceMetricTypes_L2

    def __init__(self):
        _swigvearch.DistanceMetricTypes_swiginit(self, _swigvearch.new_DistanceMetricTypes())
    __swig_destroy__ = _swigvearch.delete_DistanceMetricTypes

# Register DistanceMetricTypes in _swigvearch:
_swigvearch.DistanceMetricTypes_swigregister(DistanceMetricTypes)

class DataTypes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    INT = _swigvearch.DataTypes_INT
    LONG = _swigvearch.DataTypes_LONG
    FLOAT = _swigvearch.DataTypes_FLOAT
    DOUBLE = _swigvearch.DataTypes_DOUBLE
    STRING = _swigvearch.DataTypes_STRING
    VECTOR = _swigvearch.DataTypes_VECTOR

    def __init__(self):
        _swigvearch.DataTypes_swiginit(self, _swigvearch.new_DataTypes())
    __swig_destroy__ = _swigvearch.delete_DataTypes

# Register DataTypes in _swigvearch:
_swigvearch.DataTypes_swigregister(DataTypes)

class IndexStatuses(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    UNINDEXED = _swigvearch.IndexStatuses_UNINDEXED
    INDEXING = _swigvearch.IndexStatuses_INDEXING
    INDEXED = _swigvearch.IndexStatuses_INDEXED

    def __init__(self):
        _swigvearch.IndexStatuses_swiginit(self, _swigvearch.new_IndexStatuses())
    __swig_destroy__ = _swigvearch.delete_IndexStatuses

# Register IndexStatuses in _swigvearch:
_swigvearch.IndexStatuses_swigregister(IndexStatuses)

class SearchResultCodes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SUCCESS = _swigvearch.SearchResultCodes_SUCCESS
    INDEX_NOT_TRAINED = _swigvearch.SearchResultCodes_INDEX_NOT_TRAINED
    SEARCH_ERROR = _swigvearch.SearchResultCodes_SEARCH_ERROR

    def __init__(self):
        _swigvearch.SearchResultCodes_swiginit(self, _swigvearch.new_SearchResultCodes())
    __swig_destroy__ = _swigvearch.delete_SearchResultCodes

# Register SearchResultCodes in _swigvearch:
_swigvearch.SearchResultCodes_swigregister(SearchResultCodes)

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _swigvearch.delete_SwigPyIterator

    def value(self):
        return _swigvearch.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _swigvearch.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _swigvearch.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _swigvearch.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _swigvearch.SwigPyIterator_equal(self, x)

    def copy(self):
        return _swigvearch.SwigPyIterator_copy(self)

    def next(self):
        return _swigvearch.SwigPyIterator_next(self)

    def __next__(self):
        return _swigvearch.SwigPyIterator___next__(self)

    def previous(self):
        return _swigvearch.SwigPyIterator_previous(self)

    def advance(self, n):
        return _swigvearch.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _swigvearch.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _swigvearch.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _swigvearch.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _swigvearch.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _swigvearch.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _swigvearch.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _swigvearch:
_swigvearch.SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swigvearch.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigvearch.IntVector___nonzero__(self)

    def __bool__(self):
        return _swigvearch.IntVector___bool__(self)

    def __len__(self):
        return _swigvearch.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _swigvearch.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swigvearch.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swigvearch.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swigvearch.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swigvearch.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swigvearch.IntVector___setitem__(self, *args)

    def pop(self):
        return _swigvearch.IntVector_pop(self)

    def append(self, x):
        return _swigvearch.IntVector_append(self, x)

    def empty(self):
        return _swigvearch.IntVector_empty(self)

    def size(self):
        return _swigvearch.IntVector_size(self)

    def swap(self, v):
        return _swigvearch.IntVector_swap(self, v)

    def begin(self):
        return _swigvearch.IntVector_begin(self)

    def end(self):
        return _swigvearch.IntVector_end(self)

    def rbegin(self):
        return _swigvearch.IntVector_rbegin(self)

    def rend(self):
        return _swigvearch.IntVector_rend(self)

    def clear(self):
        return _swigvearch.IntVector_clear(self)

    def get_allocator(self):
        return _swigvearch.IntVector_get_allocator(self)

    def pop_back(self):
        return _swigvearch.IntVector_pop_back(self)

    def erase(self, *args):
        return _swigvearch.IntVector_erase(self, *args)

    def __init__(self, *args):
        _swigvearch.IntVector_swiginit(self, _swigvearch.new_IntVector(*args))

    def push_back(self, x):
        return _swigvearch.IntVector_push_back(self, x)

    def front(self):
        return _swigvearch.IntVector_front(self)

    def back(self):
        return _swigvearch.IntVector_back(self)

    def assign(self, n, x):
        return _swigvearch.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _swigvearch.IntVector_resize(self, *args)

    def insert(self, *args):
        return _swigvearch.IntVector_insert(self, *args)

    def reserve(self, n):
        return _swigvearch.IntVector_reserve(self, n)

    def capacity(self):
        return _swigvearch.IntVector_capacity(self)
    __swig_destroy__ = _swigvearch.delete_IntVector

# Register IntVector in _swigvearch:
_swigvearch.IntVector_swigregister(IntVector)

class LongVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swigvearch.LongVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigvearch.LongVector___nonzero__(self)

    def __bool__(self):
        return _swigvearch.LongVector___bool__(self)

    def __len__(self):
        return _swigvearch.LongVector___len__(self)

    def __getslice__(self, i, j):
        return _swigvearch.LongVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swigvearch.LongVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swigvearch.LongVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swigvearch.LongVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swigvearch.LongVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swigvearch.LongVector___setitem__(self, *args)

    def pop(self):
        return _swigvearch.LongVector_pop(self)

    def append(self, x):
        return _swigvearch.LongVector_append(self, x)

    def empty(self):
        return _swigvearch.LongVector_empty(self)

    def size(self):
        return _swigvearch.LongVector_size(self)

    def swap(self, v):
        return _swigvearch.LongVector_swap(self, v)

    def begin(self):
        return _swigvearch.LongVector_begin(self)

    def end(self):
        return _swigvearch.LongVector_end(self)

    def rbegin(self):
        return _swigvearch.LongVector_rbegin(self)

    def rend(self):
        return _swigvearch.LongVector_rend(self)

    def clear(self):
        return _swigvearch.LongVector_clear(self)

    def get_allocator(self):
        return _swigvearch.LongVector_get_allocator(self)

    def pop_back(self):
        return _swigvearch.LongVector_pop_back(self)

    def erase(self, *args):
        return _swigvearch.LongVector_erase(self, *args)

    def __init__(self, *args):
        _swigvearch.LongVector_swiginit(self, _swigvearch.new_LongVector(*args))

    def push_back(self, x):
        return _swigvearch.LongVector_push_back(self, x)

    def front(self):
        return _swigvearch.LongVector_front(self)

    def back(self):
        return _swigvearch.LongVector_back(self)

    def assign(self, n, x):
        return _swigvearch.LongVector_assign(self, n, x)

    def resize(self, *args):
        return _swigvearch.LongVector_resize(self, *args)

    def insert(self, *args):
        return _swigvearch.LongVector_insert(self, *args)

    def reserve(self, n):
        return _swigvearch.LongVector_reserve(self, n)

    def capacity(self):
        return _swigvearch.LongVector_capacity(self)
    __swig_destroy__ = _swigvearch.delete_LongVector

# Register LongVector in _swigvearch:
_swigvearch.LongVector_swigregister(LongVector)

class ULongVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swigvearch.ULongVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigvearch.ULongVector___nonzero__(self)

    def __bool__(self):
        return _swigvearch.ULongVector___bool__(self)

    def __len__(self):
        return _swigvearch.ULongVector___len__(self)

    def __getslice__(self, i, j):
        return _swigvearch.ULongVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swigvearch.ULongVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swigvearch.ULongVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swigvearch.ULongVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swigvearch.ULongVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swigvearch.ULongVector___setitem__(self, *args)

    def pop(self):
        return _swigvearch.ULongVector_pop(self)

    def append(self, x):
        return _swigvearch.ULongVector_append(self, x)

    def empty(self):
        return _swigvearch.ULongVector_empty(self)

    def size(self):
        return _swigvearch.ULongVector_size(self)

    def swap(self, v):
        return _swigvearch.ULongVector_swap(self, v)

    def begin(self):
        return _swigvearch.ULongVector_begin(self)

    def end(self):
        return _swigvearch.ULongVector_end(self)

    def rbegin(self):
        return _swigvearch.ULongVector_rbegin(self)

    def rend(self):
        return _swigvearch.ULongVector_rend(self)

    def clear(self):
        return _swigvearch.ULongVector_clear(self)

    def get_allocator(self):
        return _swigvearch.ULongVector_get_allocator(self)

    def pop_back(self):
        return _swigvearch.ULongVector_pop_back(self)

    def erase(self, *args):
        return _swigvearch.ULongVector_erase(self, *args)

    def __init__(self, *args):
        _swigvearch.ULongVector_swiginit(self, _swigvearch.new_ULongVector(*args))

    def push_back(self, x):
        return _swigvearch.ULongVector_push_back(self, x)

    def front(self):
        return _swigvearch.ULongVector_front(self)

    def back(self):
        return _swigvearch.ULongVector_back(self)

    def assign(self, n, x):
        return _swigvearch.ULongVector_assign(self, n, x)

    def resize(self, *args):
        return _swigvearch.ULongVector_resize(self, *args)

    def insert(self, *args):
        return _swigvearch.ULongVector_insert(self, *args)

    def reserve(self, n):
        return _swigvearch.ULongVector_reserve(self, n)

    def capacity(self):
        return _swigvearch.ULongVector_capacity(self)
    __swig_destroy__ = _swigvearch.delete_ULongVector

# Register ULongVector in _swigvearch:
_swigvearch.ULongVector_swigregister(ULongVector)

class CharVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swigvearch.CharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigvearch.CharVector___nonzero__(self)

    def __bool__(self):
        return _swigvearch.CharVector___bool__(self)

    def __len__(self):
        return _swigvearch.CharVector___len__(self)

    def __getslice__(self, i, j):
        return _swigvearch.CharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swigvearch.CharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swigvearch.CharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swigvearch.CharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swigvearch.CharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swigvearch.CharVector___setitem__(self, *args)

    def pop(self):
        return _swigvearch.CharVector_pop(self)

    def append(self, x):
        return _swigvearch.CharVector_append(self, x)

    def empty(self):
        return _swigvearch.CharVector_empty(self)

    def size(self):
        return _swigvearch.CharVector_size(self)

    def swap(self, v):
        return _swigvearch.CharVector_swap(self, v)

    def begin(self):
        return _swigvearch.CharVector_begin(self)

    def end(self):
        return _swigvearch.CharVector_end(self)

    def rbegin(self):
        return _swigvearch.CharVector_rbegin(self)

    def rend(self):
        return _swigvearch.CharVector_rend(self)

    def clear(self):
        return _swigvearch.CharVector_clear(self)

    def get_allocator(self):
        return _swigvearch.CharVector_get_allocator(self)

    def pop_back(self):
        return _swigvearch.CharVector_pop_back(self)

    def erase(self, *args):
        return _swigvearch.CharVector_erase(self, *args)

    def __init__(self, *args):
        _swigvearch.CharVector_swiginit(self, _swigvearch.new_CharVector(*args))

    def push_back(self, x):
        return _swigvearch.CharVector_push_back(self, x)

    def front(self):
        return _swigvearch.CharVector_front(self)

    def back(self):
        return _swigvearch.CharVector_back(self)

    def assign(self, n, x):
        return _swigvearch.CharVector_assign(self, n, x)

    def resize(self, *args):
        return _swigvearch.CharVector_resize(self, *args)

    def insert(self, *args):
        return _swigvearch.CharVector_insert(self, *args)

    def reserve(self, n):
        return _swigvearch.CharVector_reserve(self, n)

    def capacity(self):
        return _swigvearch.CharVector_capacity(self)
    __swig_destroy__ = _swigvearch.delete_CharVector

# Register CharVector in _swigvearch:
_swigvearch.CharVector_swigregister(CharVector)

class UCharVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swigvearch.UCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigvearch.UCharVector___nonzero__(self)

    def __bool__(self):
        return _swigvearch.UCharVector___bool__(self)

    def __len__(self):
        return _swigvearch.UCharVector___len__(self)

    def __getslice__(self, i, j):
        return _swigvearch.UCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swigvearch.UCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swigvearch.UCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swigvearch.UCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swigvearch.UCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swigvearch.UCharVector___setitem__(self, *args)

    def pop(self):
        return _swigvearch.UCharVector_pop(self)

    def append(self, x):
        return _swigvearch.UCharVector_append(self, x)

    def empty(self):
        return _swigvearch.UCharVector_empty(self)

    def size(self):
        return _swigvearch.UCharVector_size(self)

    def swap(self, v):
        return _swigvearch.UCharVector_swap(self, v)

    def begin(self):
        return _swigvearch.UCharVector_begin(self)

    def end(self):
        return _swigvearch.UCharVector_end(self)

    def rbegin(self):
        return _swigvearch.UCharVector_rbegin(self)

    def rend(self):
        return _swigvearch.UCharVector_rend(self)

    def clear(self):
        return _swigvearch.UCharVector_clear(self)

    def get_allocator(self):
        return _swigvearch.UCharVector_get_allocator(self)

    def pop_back(self):
        return _swigvearch.UCharVector_pop_back(self)

    def erase(self, *args):
        return _swigvearch.UCharVector_erase(self, *args)

    def __init__(self, *args):
        _swigvearch.UCharVector_swiginit(self, _swigvearch.new_UCharVector(*args))

    def push_back(self, x):
        return _swigvearch.UCharVector_push_back(self, x)

    def front(self):
        return _swigvearch.UCharVector_front(self)

    def back(self):
        return _swigvearch.UCharVector_back(self)

    def assign(self, n, x):
        return _swigvearch.UCharVector_assign(self, n, x)

    def resize(self, *args):
        return _swigvearch.UCharVector_resize(self, *args)

    def insert(self, *args):
        return _swigvearch.UCharVector_insert(self, *args)

    def reserve(self, n):
        return _swigvearch.UCharVector_reserve(self, n)

    def capacity(self):
        return _swigvearch.UCharVector_capacity(self)
    __swig_destroy__ = _swigvearch.delete_UCharVector

# Register UCharVector in _swigvearch:
_swigvearch.UCharVector_swigregister(UCharVector)

class FloatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swigvearch.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigvearch.FloatVector___nonzero__(self)

    def __bool__(self):
        return _swigvearch.FloatVector___bool__(self)

    def __len__(self):
        return _swigvearch.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _swigvearch.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swigvearch.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swigvearch.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swigvearch.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swigvearch.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swigvearch.FloatVector___setitem__(self, *args)

    def pop(self):
        return _swigvearch.FloatVector_pop(self)

    def append(self, x):
        return _swigvearch.FloatVector_append(self, x)

    def empty(self):
        return _swigvearch.FloatVector_empty(self)

    def size(self):
        return _swigvearch.FloatVector_size(self)

    def swap(self, v):
        return _swigvearch.FloatVector_swap(self, v)

    def begin(self):
        return _swigvearch.FloatVector_begin(self)

    def end(self):
        return _swigvearch.FloatVector_end(self)

    def rbegin(self):
        return _swigvearch.FloatVector_rbegin(self)

    def rend(self):
        return _swigvearch.FloatVector_rend(self)

    def clear(self):
        return _swigvearch.FloatVector_clear(self)

    def get_allocator(self):
        return _swigvearch.FloatVector_get_allocator(self)

    def pop_back(self):
        return _swigvearch.FloatVector_pop_back(self)

    def erase(self, *args):
        return _swigvearch.FloatVector_erase(self, *args)

    def __init__(self, *args):
        _swigvearch.FloatVector_swiginit(self, _swigvearch.new_FloatVector(*args))

    def push_back(self, x):
        return _swigvearch.FloatVector_push_back(self, x)

    def front(self):
        return _swigvearch.FloatVector_front(self)

    def back(self):
        return _swigvearch.FloatVector_back(self)

    def assign(self, n, x):
        return _swigvearch.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _swigvearch.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _swigvearch.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _swigvearch.FloatVector_reserve(self, n)

    def capacity(self):
        return _swigvearch.FloatVector_capacity(self)
    __swig_destroy__ = _swigvearch.delete_FloatVector

# Register FloatVector in _swigvearch:
_swigvearch.FloatVector_swigregister(FloatVector)

class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swigvearch.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigvearch.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _swigvearch.DoubleVector___bool__(self)

    def __len__(self):
        return _swigvearch.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _swigvearch.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swigvearch.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swigvearch.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swigvearch.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swigvearch.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swigvearch.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _swigvearch.DoubleVector_pop(self)

    def append(self, x):
        return _swigvearch.DoubleVector_append(self, x)

    def empty(self):
        return _swigvearch.DoubleVector_empty(self)

    def size(self):
        return _swigvearch.DoubleVector_size(self)

    def swap(self, v):
        return _swigvearch.DoubleVector_swap(self, v)

    def begin(self):
        return _swigvearch.DoubleVector_begin(self)

    def end(self):
        return _swigvearch.DoubleVector_end(self)

    def rbegin(self):
        return _swigvearch.DoubleVector_rbegin(self)

    def rend(self):
        return _swigvearch.DoubleVector_rend(self)

    def clear(self):
        return _swigvearch.DoubleVector_clear(self)

    def get_allocator(self):
        return _swigvearch.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _swigvearch.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _swigvearch.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _swigvearch.DoubleVector_swiginit(self, _swigvearch.new_DoubleVector(*args))

    def push_back(self, x):
        return _swigvearch.DoubleVector_push_back(self, x)

    def front(self):
        return _swigvearch.DoubleVector_front(self)

    def back(self):
        return _swigvearch.DoubleVector_back(self)

    def assign(self, n, x):
        return _swigvearch.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _swigvearch.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _swigvearch.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _swigvearch.DoubleVector_reserve(self, n)

    def capacity(self):
        return _swigvearch.DoubleVector_capacity(self)
    __swig_destroy__ = _swigvearch.delete_DoubleVector

# Register DoubleVector in _swigvearch:
_swigvearch.DoubleVector_swigregister(DoubleVector)


def ByteArrayToString(value):
    return _swigvearch.ByteArrayToString(value)

def StringToByteArray(str):
    return _swigvearch.StringToByteArray(str)

def MakeConfig(*args):
    return _swigvearch.MakeConfig(*args)

def MakeVectorInfo(*args):
    return _swigvearch.MakeVectorInfo(*args)

def ByteArrayToByteVector(value):
    return _swigvearch.ByteArrayToByteVector(value)

def MakeField(*args):
    return _swigvearch.MakeField(*args)

def InitEngine(config):
    return _swigvearch.InitEngine(config)

def CloseEngine(engine):
    return _swigvearch.CloseEngine(engine)

def FloatsToByteArray(feature, dimension):
    return _swigvearch.FloatsToByteArray(feature, dimension)

def BytesToByteArray(feature, dimension):
    return _swigvearch.BytesToByteArray(feature, dimension)

def CharsToByteArray(feature, dimension):
    return _swigvearch.CharsToByteArray(feature, dimension)

def IntsToByteArray(feature, dimension):
    return _swigvearch.IntsToByteArray(feature, dimension)

def UInt64sToByteArray(feature, dimension):
    return _swigvearch.UInt64sToByteArray(feature, dimension)

def LongsToByteArray(feature, dimension):
    return _swigvearch.LongsToByteArray(feature, dimension)

def DoublesToByteArray(feature, dimension):
    return _swigvearch.DoublesToByteArray(feature, dimension)

def FloatToByteArray(value):
    return _swigvearch.FloatToByteArray(value)

def ByteToByteArray(value):
    return _swigvearch.ByteToByteArray(value)

def CharToByteArray(value):
    return _swigvearch.CharToByteArray(value)

def IntToByteArray(value):
    return _swigvearch.IntToByteArray(value)

def UInt64ToByteArray(value):
    return _swigvearch.UInt64ToByteArray(value)

def LongToByteArray(value):
    return _swigvearch.LongToByteArray(value)

def DoubleToByteArray(value):
    return _swigvearch.DoubleToByteArray(value)

def ByteArrayToInt(value):
    return _swigvearch.ByteArrayToInt(value)

def ByteArrayToLong(value):
    return _swigvearch.ByteArrayToLong(value)

def ByteArrayToFloat(value):
    return _swigvearch.ByteArrayToFloat(value)

def ByteArrayToDouble(value):
    return _swigvearch.ByteArrayToDouble(value)

def ByteArrayToIntVector(value):
    return _swigvearch.ByteArrayToIntVector(value)

def ByteArrayToLongVector(value):
    return _swigvearch.ByteArrayToLongVector(value)

def ByteArrayToULongVector(value):
    return _swigvearch.ByteArrayToULongVector(value)

def ByteArrayToCharVector(value):
    return _swigvearch.ByteArrayToCharVector(value)

def ByteArrayToFloatVector(value):
    return _swigvearch.ByteArrayToFloatVector(value)

def ByteArrayToDoubleVector(value):
    return _swigvearch.ByteArrayToDoubleVector(value)

def swig_ptr(a):
    return _swigvearch.swig_ptr(a)

def rev_swig_ptr(*args):
    return _swigvearch.rev_swig_ptr(*args)


