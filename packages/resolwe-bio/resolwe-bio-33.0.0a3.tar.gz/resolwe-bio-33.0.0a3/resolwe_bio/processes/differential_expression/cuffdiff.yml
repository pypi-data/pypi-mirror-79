# ==================================
# Differential Expression - CuffDiff
# ==================================
---

- slug: cuffdiff
  name: Cuffdiff 2.2
  requirements:
    expression-engine: jinja
    executor:
      docker:
        image: resolwebio/rnaseq:4.9.0
    resources:
      cores: 10
  data_name: 'Cuffdiff results'
  version: 3.0.0
  type: data:differentialexpression:cuffdiff
  category: Differential Expression
  persistence: CACHED
  description: |
    Cuffdiff finds significant changes in transcript expression, splicing, and
    promoter use.  You can use it to find differentially expressed genes and
    transcripts, as well as genes that are being differentially regulated at
    the transcriptional and post-transcriptional level. See
    [here](http://cole-trapnell-lab.github.io/cufflinks/cuffdiff/) and
    [here](https://software.broadinstitute.org/cancer/software/genepattern/modules/docs/Cuffdiff/7)
    for more information.
  input:
    - name: case
      label: Case samples
      type: list:data:cufflinks:cuffquant
    - name: control
      label: Control samples
      type: list:data:cufflinks:cuffquant
    - name: labels
      label: Group labels
      type: list:basic:string
      default: [control, case]
      description: |
        Define labels for each sample group.
    - name: annotation
      label: Annotation (GTF/GFF3)
      type: data:annotation
      description: |
        A transcript annotation file produced by cufflinks, cuffcompare, or other tool.
    - name: genome
      label: Run bias detection and correction algorithm
      type: data:seq:nucleotide
      required: false
      description: |
        Provide Cufflinks with a multifasta file (genome file) via this
        option to instruct it to run a bias detection and correction
        algorithm which can significantly improve accuracy of transcript
        abundance estimates.
    - name: multi_read_correct
      label: Do initial estimation procedure to more accurately weight reads with multiple genome mappings
      type: basic:boolean
      default: false
    - name: fdr
      label: Allowed FDR
      type: basic:decimal
      default: 0.05
      description: |
        The allowed false discovery rate. The default is 0.05.
    - name: library_type
      label: Library type
      type: basic:string
      description: |
        In cases where Cufflinks cannot determine the platform and
        protocol used to generate input reads, you can supply this
        information manually, which will allow Cufflinks to infer source
        strand information with certain protocols. The available options
        are listed below. For paired-end data, we currently only support
        protocols where reads are point towards each other:
        fr-unstranded - Reads from the left-most end of the fragment
        (in transcript coordinates) map to the transcript strand, and
        the right-most end maps to the opposite strand; fr-firststrand -
        Same as above except we enforce the rule that the right-most end
        of the fragment (in transcript coordinates) is the first
        sequenced (or only sequenced for single-end reads).
        Equivalently, it is assumed that only the strand generated
        during first strand synthesis is sequenced; fr-secondstrand -
        Same as above except we enforce the rule that the left-most end
        of the fragment (in transcript coordinates) is the first
        sequenced (or only sequenced for single-end reads).
        Equivalently, it is assumed that only the strand generated
        during second strand synthesis is sequenced.
      default: fr-unstranded
      choices:
        - label: fr-unstranded
          value: fr-unstranded
        - label: fr-firststrand
          value: fr-firststrand
        - label: fr-secondstrand
          value: fr-secondstrand
    - name: library_normalization
      label: Library normalization method
      type: basic:string
      description: |
        You can control how library sizes (i.e. sequencing depths) are
        normalized in Cufflinks and Cuffdiff. Cuffdiff has several
        methods that require multiple libraries in order to work.
        Library normalization methods supported by Cufflinks work on one
        library at a time.
      default: geometric
      choices:
        - label: geometric
          value: geometric
        - label: classic-fpkm
          value: classic-fpkm
        - label: quartile
          value: quartile
    - name: dispersion_method
      label: Dispersion method
      type: basic:string
      description: |
        Cuffdiff works by modeling the variance in fragment counts
        across replicates as a function of the mean fragment count
        across replicates. Strictly speaking, models a quantitity
        called dispersion - the variance present in a group of samples
        beyond what is expected from a simple Poisson model of RNA_Seq.
        You can control how Cuffdiff constructs its model of dispersion
        in locus fragment counts. Each condition that has replicates
        can receive its own model, or Cuffdiff can use a global model
        for all conditions. All of these policies are identical to those
        used by DESeq (Anders and Huber, Genome Biology, 2010).
      default: pooled
      choices:
        - label: pooled
          value: pooled
        - label: per-condition
          value: per-condition
        - label: blind
          value: blind
        - label: poisson
          value: poisson
  output:
    - name: raw
      label: Differential expression (gene level)
      type: basic:file
    - name: de_json
      label: Results table (JSON)
      type: basic:json
    - name: de_file
      label: Results table (file)
      type: basic:file
    - name: transcript_diff_exp
      label: Differential expression (transcript level)
      type: basic:file
    - name: tss_group_diff_exp
      label: Differential expression (primary transcript)
      type: basic:file
    - name: cds_diff_exp
      label: Differential expression (coding sequence)
      type: basic:file
    - name: cuffdiff_output
      label: Cuffdiff output
      type: basic:file
    - name: source
      label: Gene ID database
      type: basic:string
    - name: species
      label: Species
      type: basic:string
    - name: build
      label: Build
      type: basic:string
    - name: feature_type
      label: Feature type
      type: basic:string
  run:
    runtime: polyglot
    language: bash
    program: |
      cases=()
      controls=()
      labels=()

      {% set cuffquants = case + control %}

      {% for c in cuffquants %}

        {% if c.source != (cuffquants|first).source %}
          re-warning "All samples must be annotated by the same genome database."
          re-error "Sample {{ c|sample_name }} has {{ c.source }} gene IDs, while {{ (cuffquants|first)|name }} has {{ (cuffquants|first).source }} gene IDs."
        {% endif %}

        {% if c.species != (cuffquants|first).species %}
          re-warning "All samples must be the same species."
          re-error "Sample {{ c|sample_name }} is {{ c.species }}, while {{ (cuffquants|first)|name }} is a(n) {{ (cuffquants|first).species }}."
        {% endif %}

        {% if c.build != (cuffquants|first).build %}
          re-warning "All samples must share the same genome build information."
          re-error "Sample {{ c|sample_name }} has {{ c.build }}, while {{ (cuffquants|first)|name }} has {{ (cuffquants|first).build }} build information."
        {% endif %}

      {% endfor %}

      {% for t in case %}
        {% if t in control %}
          re-warning "DE analysis failed. Case and Control groups must contain unique samples."
          re-error " Sample {{ t|sample_name }} is in both Case and Control group."
        {% endif %}
      {% endfor %}

      # TODO: This should be made available in common runtime.
      function join_by { local IFS="$1"; shift; echo "$*"; }

      {% for cs_samp in case %}
        cases+=({{ cs_samp.cxb.file }})
      {% endfor %}

      {% for ct_samp in control %}
        controls+=({{ ct_samp.cxb.file }})
      {% endfor %}

      {% for label in labels %}
        labels+=({{ label }})
      {% endfor %}

      re-save source {{ (case|first).source }}
      re-save species {{ (case|first).species }}
      re-save build {{ (case|first).build }}
      re-save feature_type 'gene'

      re-progress 0.1

      controls=$(join_by , "${controls[@]}")
      cases=$(join_by , "${cases[@]}")
      labels=$(join_by , "${labels[@]}")

      cuffdiff \
        -output-dir ./ \
        -num-threads {{ requirements.resources.cores }} \
        -labels "${labels}" \
        {% if genome %}-frag-bias-correct {{ genome.fasta.file }}{% endif %} \
        {% if multi_read_correct %}-multi-read-correct{% endif %} \
        -FDR {{ fdr }} \
        -library-type {{ library_type }} \
        -library-norm-method {{ library_normalization }} \
        -dispersion-method {{ dispersion_method }} \
        -quiet \
        {{ annotation.annot.file }} \
        "${controls}" \
        "${cases}"

      re-checkrc
      re-progress 0.9

      mv gene_exp.diff cuffdiff.tab

      zip \
        cuffdiff_output.zip \
        cds.* \
        isoforms.* \
        genes.* \
        tss_groups.* \
        read_groups.* \
        promoters.diff \
        splicing.diff \
        cds_exp.diff \
        cuffdiff.tab \
        isoform_exp.diff \
        tss_group_exp.diff

      parse_diffexp.py \
        cuffdiff.tab \
        de_data.json \
        de_file.tab.gz \
        --gene_id gene_id \
        --fdr q_value \
        --pvalue p_value \
        --logfc "log2(fold_change)" \
        --stat test_stat

      gzip cuffdiff.tab

      re-save de_json de_data.json
      re-save-file raw cuffdiff.tab.gz
      re-save-file de_file de_file.tab.gz
      re-save-file transcript_diff_exp isoform_exp.diff
      re-save-file cds_diff_exp cds_exp.diff
      re-save-file tss_group_diff_exp tss_group_exp.diff
      re-save-file cuffdiff_output cuffdiff_output.zip
