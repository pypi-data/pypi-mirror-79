# coding: utf-8


import pprint
import re  # noqa: F401

import six


class Body50(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_token': 'str',
        'watch_type': 'str'
    }

    attribute_map = {
        'access_token': 'access_token',
        'watch_type': 'watch_type'
    }

    def __init__(self, access_token=None, watch_type='watching'):  # noqa: E501
        """Body50 - a model defined in Swagger"""  # noqa: E501
        self._access_token = None
        self._watch_type = None
        self.discriminator = None
        if access_token is not None:
            self.access_token = access_token
        self.watch_type = watch_type

    @property
    def access_token(self):
        """Gets the access_token of this Body50.  # noqa: E501

        用户授权码  # noqa: E501

        :return: The access_token of this Body50.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this Body50.

        用户授权码  # noqa: E501

        :param access_token: The access_token of this Body50.  # noqa: E501
        :type: str
        """

        self._access_token = access_token

    @property
    def watch_type(self):
        """Gets the watch_type of this Body50.  # noqa: E501

        watch策略, watching: 关注所有动态, ignoring: 关注但不提醒动态  # noqa: E501

        :return: The watch_type of this Body50.  # noqa: E501
        :rtype: str
        """
        return self._watch_type

    @watch_type.setter
    def watch_type(self, watch_type):
        """Sets the watch_type of this Body50.

        watch策略, watching: 关注所有动态, ignoring: 关注但不提醒动态  # noqa: E501

        :param watch_type: The watch_type of this Body50.  # noqa: E501
        :type: str
        """
        if watch_type is None:
            raise ValueError("Invalid value for `watch_type`, must not be `None`")  # noqa: E501
        allowed_values = ["watching", "ignoring"]  # noqa: E501
        if watch_type not in allowed_values:
            raise ValueError(
                "Invalid value for `watch_type` ({0}), must be one of {1}"  # noqa: E501
                    .format(watch_type, allowed_values)
            )

        self._watch_type = watch_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body50, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body50):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
