# coding: utf-8


import pprint
import re  # noqa: F401

import six


class Body25(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_token': 'str',
        'title': 'str',
        'head': 'str',
        'base': 'str',
        'body': 'str',
        'milestone_number': 'int',
        'labels': 'str',
        'issue': 'str',
        'assignees': 'str',
        'testers': 'str',
        'prune_source_branch': 'bool'
    }

    attribute_map = {
        'access_token': 'access_token',
        'title': 'title',
        'head': 'head',
        'base': 'base',
        'body': 'body',
        'milestone_number': 'milestone_number',
        'labels': 'labels',
        'issue': 'issue',
        'assignees': 'assignees',
        'testers': 'testers',
        'prune_source_branch': 'prune_source_branch'
    }

    def __init__(self, access_token=None, title=None, head=None, base=None, body=None, milestone_number=None,
                 labels=None, issue=None, assignees=None, testers=None, prune_source_branch=None):  # noqa: E501
        """Body25 - a model defined in Swagger"""  # noqa: E501
        self._access_token = None
        self._title = None
        self._head = None
        self._base = None
        self._body = None
        self._milestone_number = None
        self._labels = None
        self._issue = None
        self._assignees = None
        self._testers = None
        self._prune_source_branch = None
        self.discriminator = None
        if access_token is not None:
            self.access_token = access_token
        self.title = title
        self.head = head
        self.base = base
        if body is not None:
            self.body = body
        if milestone_number is not None:
            self.milestone_number = milestone_number
        if labels is not None:
            self.labels = labels
        if issue is not None:
            self.issue = issue
        if assignees is not None:
            self.assignees = assignees
        if testers is not None:
            self.testers = testers
        if prune_source_branch is not None:
            self.prune_source_branch = prune_source_branch

    @property
    def access_token(self):
        """Gets the access_token of this Body25.  # noqa: E501

        用户授权码  # noqa: E501

        :return: The access_token of this Body25.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this Body25.

        用户授权码  # noqa: E501

        :param access_token: The access_token of this Body25.  # noqa: E501
        :type: str
        """

        self._access_token = access_token

    @property
    def title(self):
        """Gets the title of this Body25.  # noqa: E501

        必填。Pull Request 标题  # noqa: E501

        :return: The title of this Body25.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Body25.

        必填。Pull Request 标题  # noqa: E501

        :param title: The title of this Body25.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def head(self):
        """Gets the head of this Body25.  # noqa: E501

        必填。Pull Request 提交的源分支。格式：branch 或者：username:branch  # noqa: E501

        :return: The head of this Body25.  # noqa: E501
        :rtype: str
        """
        return self._head

    @head.setter
    def head(self, head):
        """Sets the head of this Body25.

        必填。Pull Request 提交的源分支。格式：branch 或者：username:branch  # noqa: E501

        :param head: The head of this Body25.  # noqa: E501
        :type: str
        """
        if head is None:
            raise ValueError("Invalid value for `head`, must not be `None`")  # noqa: E501

        self._head = head

    @property
    def base(self):
        """Gets the base of this Body25.  # noqa: E501

        必填。Pull Request 提交目标分支的名称  # noqa: E501

        :return: The base of this Body25.  # noqa: E501
        :rtype: str
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this Body25.

        必填。Pull Request 提交目标分支的名称  # noqa: E501

        :param base: The base of this Body25.  # noqa: E501
        :type: str
        """
        if base is None:
            raise ValueError("Invalid value for `base`, must not be `None`")  # noqa: E501

        self._base = base

    @property
    def body(self):
        """Gets the body of this Body25.  # noqa: E501

        可选。Pull Request 内容  # noqa: E501

        :return: The body of this Body25.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Body25.

        可选。Pull Request 内容  # noqa: E501

        :param body: The body of this Body25.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def milestone_number(self):
        """Gets the milestone_number of this Body25.  # noqa: E501

        可选。里程碑序号(id)  # noqa: E501

        :return: The milestone_number of this Body25.  # noqa: E501
        :rtype: int
        """
        return self._milestone_number

    @milestone_number.setter
    def milestone_number(self, milestone_number):
        """Sets the milestone_number of this Body25.

        可选。里程碑序号(id)  # noqa: E501

        :param milestone_number: The milestone_number of this Body25.  # noqa: E501
        :type: int
        """

        self._milestone_number = milestone_number

    @property
    def labels(self):
        """Gets the labels of this Body25.  # noqa: E501

        用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance  # noqa: E501

        :return: The labels of this Body25.  # noqa: E501
        :rtype: str
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Body25.

        用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance  # noqa: E501

        :param labels: The labels of this Body25.  # noqa: E501
        :type: str
        """

        self._labels = labels

    @property
    def issue(self):
        """Gets the issue of this Body25.  # noqa: E501

        可选。Pull Request的标题和内容可以根据指定的Issue Id自动填充  # noqa: E501

        :return: The issue of this Body25.  # noqa: E501
        :rtype: str
        """
        return self._issue

    @issue.setter
    def issue(self, issue):
        """Sets the issue of this Body25.

        可选。Pull Request的标题和内容可以根据指定的Issue Id自动填充  # noqa: E501

        :param issue: The issue of this Body25.  # noqa: E501
        :type: str
        """

        self._issue = issue

    @property
    def assignees(self):
        """Gets the assignees of this Body25.  # noqa: E501

        可选。审查人员username，可多个，半角逗号分隔，如：(username1,username2), 注意: 当仓库代码审查设置中已设置【指派审查人员】则此选项无效  # noqa: E501

        :return: The assignees of this Body25.  # noqa: E501
        :rtype: str
        """
        return self._assignees

    @assignees.setter
    def assignees(self, assignees):
        """Sets the assignees of this Body25.

        可选。审查人员username，可多个，半角逗号分隔，如：(username1,username2), 注意: 当仓库代码审查设置中已设置【指派审查人员】则此选项无效  # noqa: E501

        :param assignees: The assignees of this Body25.  # noqa: E501
        :type: str
        """

        self._assignees = assignees

    @property
    def testers(self):
        """Gets the testers of this Body25.  # noqa: E501

        可选。测试人员username，可多个，半角逗号分隔，如：(username1,username2), 注意: 当仓库代码审查设置中已设置【指派测试人员】则此选项无效  # noqa: E501

        :return: The testers of this Body25.  # noqa: E501
        :rtype: str
        """
        return self._testers

    @testers.setter
    def testers(self, testers):
        """Sets the testers of this Body25.

        可选。测试人员username，可多个，半角逗号分隔，如：(username1,username2), 注意: 当仓库代码审查设置中已设置【指派测试人员】则此选项无效  # noqa: E501

        :param testers: The testers of this Body25.  # noqa: E501
        :type: str
        """

        self._testers = testers

    @property
    def prune_source_branch(self):
        """Gets the prune_source_branch of this Body25.  # noqa: E501

        可选。合并PR后是否删除源分支，默认false（不删除）  # noqa: E501

        :return: The prune_source_branch of this Body25.  # noqa: E501
        :rtype: bool
        """
        return self._prune_source_branch

    @prune_source_branch.setter
    def prune_source_branch(self, prune_source_branch):
        """Sets the prune_source_branch of this Body25.

        可选。合并PR后是否删除源分支，默认false（不删除）  # noqa: E501

        :param prune_source_branch: The prune_source_branch of this Body25.  # noqa: E501
        :type: bool
        """

        self._prune_source_branch = prune_source_branch

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body25, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body25):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
