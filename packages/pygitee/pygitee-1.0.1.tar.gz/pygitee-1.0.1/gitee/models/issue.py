# coding: utf-8


import pprint
import re  # noqa: F401

import six


class Issue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'url': 'str',
        'repository_url': 'str',
        'labels_url': 'str',
        'comments_url': 'str',
        'html_url': 'str',
        'parent_url': 'str',
        'number': 'str',
        'state': 'str',
        'title': 'str',
        'body': 'str',
        'body_html': 'str',
        'user': 'str',
        'labels': 'Label',
        'assignee': 'UserBasic',
        'collaborators': 'UserBasic',
        'repository': 'str',
        'milestone': 'Milestone',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'plan_started_at': 'datetime',
        'deadline': 'datetime',
        'finished_at': 'datetime',
        'scheduled_time': 'str',
        'comments': 'int',
        'issue_type': 'str',
        'program': 'ProgramBasic',
        'security_hole': 'str'
    }

    attribute_map = {
        'id': 'id',
        'url': 'url',
        'repository_url': 'repository_url',
        'labels_url': 'labels_url',
        'comments_url': 'comments_url',
        'html_url': 'html_url',
        'parent_url': 'parent_url',
        'number': 'number',
        'state': 'state',
        'title': 'title',
        'body': 'body',
        'body_html': 'body_html',
        'user': 'user',
        'labels': 'labels',
        'assignee': 'assignee',
        'collaborators': 'collaborators',
        'repository': 'repository',
        'milestone': 'milestone',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'plan_started_at': 'plan_started_at',
        'deadline': 'deadline',
        'finished_at': 'finished_at',
        'scheduled_time': 'scheduled_time',
        'comments': 'comments',
        'issue_type': 'issue_type',
        'program': 'program',
        'security_hole': 'security_hole'
    }

    def __init__(self, id=None, url=None, repository_url=None, labels_url=None, comments_url=None, html_url=None,
                 parent_url=None, number=None, state=None, title=None, body=None, body_html=None, user=None,
                 labels=None, assignee=None, collaborators=None, repository=None, milestone=None, created_at=None,
                 updated_at=None, plan_started_at=None, deadline=None, finished_at=None, scheduled_time=None,
                 comments=None, issue_type=None, program=None, security_hole=None):  # noqa: E501
        """Issue - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._url = None
        self._repository_url = None
        self._labels_url = None
        self._comments_url = None
        self._html_url = None
        self._parent_url = None
        self._number = None
        self._state = None
        self._title = None
        self._body = None
        self._body_html = None
        self._user = None
        self._labels = None
        self._assignee = None
        self._collaborators = None
        self._repository = None
        self._milestone = None
        self._created_at = None
        self._updated_at = None
        self._plan_started_at = None
        self._deadline = None
        self._finished_at = None
        self._scheduled_time = None
        self._comments = None
        self._issue_type = None
        self._program = None
        self._security_hole = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if url is not None:
            self.url = url
        if repository_url is not None:
            self.repository_url = repository_url
        if labels_url is not None:
            self.labels_url = labels_url
        if comments_url is not None:
            self.comments_url = comments_url
        if html_url is not None:
            self.html_url = html_url
        if parent_url is not None:
            self.parent_url = parent_url
        if number is not None:
            self.number = number
        if state is not None:
            self.state = state
        if title is not None:
            self.title = title
        if body is not None:
            self.body = body
        if body_html is not None:
            self.body_html = body_html
        if user is not None:
            self.user = user
        if labels is not None:
            self.labels = labels
        if assignee is not None:
            self.assignee = assignee
        if collaborators is not None:
            self.collaborators = collaborators
        if repository is not None:
            self.repository = repository
        if milestone is not None:
            self.milestone = milestone
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if plan_started_at is not None:
            self.plan_started_at = plan_started_at
        if deadline is not None:
            self.deadline = deadline
        if finished_at is not None:
            self.finished_at = finished_at
        if scheduled_time is not None:
            self.scheduled_time = scheduled_time
        if comments is not None:
            self.comments = comments
        if issue_type is not None:
            self.issue_type = issue_type
        if program is not None:
            self.program = program
        if security_hole is not None:
            self.security_hole = security_hole

    @property
    def id(self):
        """Gets the id of this Issue.  # noqa: E501


        :return: The id of this Issue.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Issue.


        :param id: The id of this Issue.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def url(self):
        """Gets the url of this Issue.  # noqa: E501


        :return: The url of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Issue.


        :param url: The url of this Issue.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def repository_url(self):
        """Gets the repository_url of this Issue.  # noqa: E501


        :return: The repository_url of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._repository_url

    @repository_url.setter
    def repository_url(self, repository_url):
        """Sets the repository_url of this Issue.


        :param repository_url: The repository_url of this Issue.  # noqa: E501
        :type: str
        """

        self._repository_url = repository_url

    @property
    def labels_url(self):
        """Gets the labels_url of this Issue.  # noqa: E501


        :return: The labels_url of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._labels_url

    @labels_url.setter
    def labels_url(self, labels_url):
        """Sets the labels_url of this Issue.


        :param labels_url: The labels_url of this Issue.  # noqa: E501
        :type: str
        """

        self._labels_url = labels_url

    @property
    def comments_url(self):
        """Gets the comments_url of this Issue.  # noqa: E501


        :return: The comments_url of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._comments_url

    @comments_url.setter
    def comments_url(self, comments_url):
        """Sets the comments_url of this Issue.


        :param comments_url: The comments_url of this Issue.  # noqa: E501
        :type: str
        """

        self._comments_url = comments_url

    @property
    def html_url(self):
        """Gets the html_url of this Issue.  # noqa: E501


        :return: The html_url of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this Issue.


        :param html_url: The html_url of this Issue.  # noqa: E501
        :type: str
        """

        self._html_url = html_url

    @property
    def parent_url(self):
        """Gets the parent_url of this Issue.  # noqa: E501


        :return: The parent_url of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._parent_url

    @parent_url.setter
    def parent_url(self, parent_url):
        """Sets the parent_url of this Issue.


        :param parent_url: The parent_url of this Issue.  # noqa: E501
        :type: str
        """

        self._parent_url = parent_url

    @property
    def number(self):
        """Gets the number of this Issue.  # noqa: E501


        :return: The number of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Issue.


        :param number: The number of this Issue.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def state(self):
        """Gets the state of this Issue.  # noqa: E501


        :return: The state of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Issue.


        :param state: The state of this Issue.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def title(self):
        """Gets the title of this Issue.  # noqa: E501


        :return: The title of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Issue.


        :param title: The title of this Issue.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def body(self):
        """Gets the body of this Issue.  # noqa: E501


        :return: The body of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Issue.


        :param body: The body of this Issue.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def body_html(self):
        """Gets the body_html of this Issue.  # noqa: E501


        :return: The body_html of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._body_html

    @body_html.setter
    def body_html(self, body_html):
        """Sets the body_html of this Issue.


        :param body_html: The body_html of this Issue.  # noqa: E501
        :type: str
        """

        self._body_html = body_html

    @property
    def user(self):
        """Gets the user of this Issue.  # noqa: E501


        :return: The user of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Issue.


        :param user: The user of this Issue.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def labels(self):
        """Gets the labels of this Issue.  # noqa: E501


        :return: The labels of this Issue.  # noqa: E501
        :rtype: Label
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Issue.


        :param labels: The labels of this Issue.  # noqa: E501
        :type: Label
        """

        self._labels = labels

    @property
    def assignee(self):
        """Gets the assignee of this Issue.  # noqa: E501


        :return: The assignee of this Issue.  # noqa: E501
        :rtype: UserBasic
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee):
        """Sets the assignee of this Issue.


        :param assignee: The assignee of this Issue.  # noqa: E501
        :type: UserBasic
        """

        self._assignee = assignee

    @property
    def collaborators(self):
        """Gets the collaborators of this Issue.  # noqa: E501


        :return: The collaborators of this Issue.  # noqa: E501
        :rtype: UserBasic
        """
        return self._collaborators

    @collaborators.setter
    def collaborators(self, collaborators):
        """Sets the collaborators of this Issue.


        :param collaborators: The collaborators of this Issue.  # noqa: E501
        :type: UserBasic
        """

        self._collaborators = collaborators

    @property
    def repository(self):
        """Gets the repository of this Issue.  # noqa: E501


        :return: The repository of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this Issue.


        :param repository: The repository of this Issue.  # noqa: E501
        :type: str
        """

        self._repository = repository

    @property
    def milestone(self):
        """Gets the milestone of this Issue.  # noqa: E501


        :return: The milestone of this Issue.  # noqa: E501
        :rtype: Milestone
        """
        return self._milestone

    @milestone.setter
    def milestone(self, milestone):
        """Sets the milestone of this Issue.


        :param milestone: The milestone of this Issue.  # noqa: E501
        :type: Milestone
        """

        self._milestone = milestone

    @property
    def created_at(self):
        """Gets the created_at of this Issue.  # noqa: E501


        :return: The created_at of this Issue.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Issue.


        :param created_at: The created_at of this Issue.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Issue.  # noqa: E501


        :return: The updated_at of this Issue.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Issue.


        :param updated_at: The updated_at of this Issue.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def plan_started_at(self):
        """Gets the plan_started_at of this Issue.  # noqa: E501


        :return: The plan_started_at of this Issue.  # noqa: E501
        :rtype: datetime
        """
        return self._plan_started_at

    @plan_started_at.setter
    def plan_started_at(self, plan_started_at):
        """Sets the plan_started_at of this Issue.


        :param plan_started_at: The plan_started_at of this Issue.  # noqa: E501
        :type: datetime
        """

        self._plan_started_at = plan_started_at

    @property
    def deadline(self):
        """Gets the deadline of this Issue.  # noqa: E501


        :return: The deadline of this Issue.  # noqa: E501
        :rtype: datetime
        """
        return self._deadline

    @deadline.setter
    def deadline(self, deadline):
        """Sets the deadline of this Issue.


        :param deadline: The deadline of this Issue.  # noqa: E501
        :type: datetime
        """

        self._deadline = deadline

    @property
    def finished_at(self):
        """Gets the finished_at of this Issue.  # noqa: E501


        :return: The finished_at of this Issue.  # noqa: E501
        :rtype: datetime
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this Issue.


        :param finished_at: The finished_at of this Issue.  # noqa: E501
        :type: datetime
        """

        self._finished_at = finished_at

    @property
    def scheduled_time(self):
        """Gets the scheduled_time of this Issue.  # noqa: E501


        :return: The scheduled_time of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._scheduled_time

    @scheduled_time.setter
    def scheduled_time(self, scheduled_time):
        """Sets the scheduled_time of this Issue.


        :param scheduled_time: The scheduled_time of this Issue.  # noqa: E501
        :type: str
        """

        self._scheduled_time = scheduled_time

    @property
    def comments(self):
        """Gets the comments of this Issue.  # noqa: E501


        :return: The comments of this Issue.  # noqa: E501
        :rtype: int
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this Issue.


        :param comments: The comments of this Issue.  # noqa: E501
        :type: int
        """

        self._comments = comments

    @property
    def issue_type(self):
        """Gets the issue_type of this Issue.  # noqa: E501


        :return: The issue_type of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._issue_type

    @issue_type.setter
    def issue_type(self, issue_type):
        """Sets the issue_type of this Issue.


        :param issue_type: The issue_type of this Issue.  # noqa: E501
        :type: str
        """

        self._issue_type = issue_type

    @property
    def program(self):
        """Gets the program of this Issue.  # noqa: E501


        :return: The program of this Issue.  # noqa: E501
        :rtype: ProgramBasic
        """
        return self._program

    @program.setter
    def program(self, program):
        """Sets the program of this Issue.


        :param program: The program of this Issue.  # noqa: E501
        :type: ProgramBasic
        """

        self._program = program

    @property
    def security_hole(self):
        """Gets the security_hole of this Issue.  # noqa: E501


        :return: The security_hole of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._security_hole

    @security_hole.setter
    def security_hole(self, security_hole):
        """Sets the security_hole of this Issue.


        :param security_hole: The security_hole of this Issue.  # noqa: E501
        :type: str
        """

        self._security_hole = security_hole

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Issue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Issue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
