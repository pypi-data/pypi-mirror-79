.. _introduction:


Introduction
============

|project_name| monitors the output of webpages or commands on your computer shell.

Every time you run |project_name|, it:

#. retrieves the output;
#. transforms and filters it (optional);
#. compares this with what it saved from the previous run, producing a "diff" report if it finds changes;
#. (optional) filters the diff report;
#. displays such report (default) and/or send it via one or more methods (configurable) such as email.

:ref:`Jobs`
-----------
You can monitor multiple sources with a single run of `urlwatch`; each such source of data is a "job". The instructions for each
such job are contained in a config file in the **YAML format** called ``jobs.yaml`` and located in the
``~/.urwatch/`` directory (Linux) or in the ``urlwatch`` folder within your Documents folder, i.e.
``%USERPROFILE%/Documents/urlwatch`` (Windows).  You can use any text editor to edit it.

For additional information on YAML, see the `YAML specifications <https://yaml.org/spec/>`__.

The minimum configuration necessary for `urlwatch` to work is a single ``url`` key (for web resources) or
``command`` key (for the output of a shell command):

.. code-block:: yaml

   url: https://example.dummy/

If you have multiple sources to monitor, i.e. multiple "jobs", separate each with a line of three dashes
(``---``):

.. code-block:: yaml

   url: https://example.dummy/
   ---
   url: https://example.dummy/page2
   ---
   command: dir

By default, the content of a web URL is downloaded as-is; if you need for a webpage to be
rendered and its JavaScript run before its HTML is captured, add the key ``use_browser: true`` in its own line. This
requires additional downloads and uses many resources; see :ref:`here <use_browser>` for more information.

.. code-block:: yaml

   url: https://example.dummy/
   use_browser: true

Each job can have a ``name`` to help you identify what you're monitoring, but if you don't enter one
and you are monitoring a webpage `urlwatch` will automatically use its title in the report.

.. code-block:: yaml

   name: Sample
   url: https://example.dummy/

You can enter remarks in your YAML configuration file using ``#``:

.. code-block:: yaml

   # I am monitoring this site because I expect it to change for the better
   name: Sample
   url: https://example.dummy/

Finally, there are many and many options available to finely control the job; see :ref:`jobs`.

:ref:`Filters`
--------------
Once you have collected the output, you may transform it to increase its utility.  You use the ``filter`` key to
select one or more :ref:`filters` to:

* select HTML or (XML): ``css``, ``xpath``, ``element-by-class``, ``element-by-id``, ``element-by-style``, ``element-by-tag``
* extract text from HTML: ``html2text``
* make HTML more readable: ``beautify``
* extract text from PDF: ``pdf2text``, ``ocr``
* make JSON more readable: ``format-json``
* make iCal more readable: ``ical2text``
* make binary readable: ``hexdump``
* detect if anything changed: ``sha1sum``
* edit text: ``keep_lines_matching``, ``delete_lines_matching``, ``re.sub``, ``strip``, ``sort``

Please note that some filters require additional Python packages to work; see :ref:`dependencies` or the filter
description.

These filters can be chained. As an example, after retrieving an HTML document by using the ``url`` key, you
can extract a selection with the ``xpath`` filter, convert it to text with ``html2text``, extract only lines matching
a specific regular expression with ``keep_lines_matching``, and sort the result with ``sort``:

.. code-block:: yaml

    name: Sample urlwatch job definition
    url: https://example.com/
    https_proxy: http://user:passwor@example.net:8080
    max_tries: 2
    filter:
      - xpath: //section[@role="main"]
      - html2text:
          method: html2text
          unicode_snob: true
          body_width: 0
          inline_links: false
          ignore_links: true
          ignore_images: true
          pad_tables: false
          single_line_break: true
      - keep_lines_matching: lines I care about
      - sort:
    ---


Comparison
----------
`urlwatch` automatically performs a comparison between the filtered data collected in this run with the one
saved from the prior run, computing a diff in the `unified format
<https://en.wikipedia.org/wiki/Diff#Unified_format>`__ by default.


Diff :ref:`Filters`
-------------------
(Rare) The same filters as above can be applied to the diff report itself; see :ref:`filters`.


:ref:`Reporters`
----------------
By default `urlwatch` displays the diff report on the ``stdout`` console, but you can add (or change to) one or more of:

- ``email`` (using SMTP)
- email using ``mailgun``
- ``browser``
- ``slack``
- ``pushbullet``
- ``telegram``
- ``matrix``
- ``pushover``
- ``stdout`` (your console)
- ``xmpp``

Please note that some reporters require additional Python packages to work; see :ref:`dependencies` or the reporter
description.

Reporters are configured in a separate file, see :ref:`configuration`.