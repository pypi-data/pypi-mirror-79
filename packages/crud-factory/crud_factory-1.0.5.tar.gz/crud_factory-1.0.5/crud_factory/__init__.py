"""

@Author: Olukunle Ogunmokun
@github: https://github.com/kunsam002
@username: Kunsam002

"""

from crud_factory import utils


class ObjectNotFoundException(Exception):
    """ This exception is thrown when an object is queried by ID and not retrieved """

    def __init__(self, klass, obj_id):
        message = "%s: Object not found with id: %s" % (klass.__name__, obj_id)
        self.data = {"name": "ObjectNotFoundException", "message": message}
        self.status = 501
        super(ObjectNotFoundException, self).__init__(message)


class CRUDFactory(object):
    """
    Factory class for creating services. The service class will be bound to a model and returned as a class.
    This class can then be used or subclassed directly. The services generated by this class will contain
    specific methods for creating, retrieving, updating, deleting and querying data.
    """

    model_class = None
    db = None

    @classmethod
    def _handle_insert(cls, obj, ignored_args, **kwargs):
        data = utils.clean_kwargs(ignored_args, kwargs)
        obj = utils.populate_obj(obj, data)
        cls.db.session.add(obj)
        try:
            cls.db.session.commit()
            return obj
        except Exception as e:
            print(e)
            cls.db.session.rollback()
            raise

    @classmethod
    def _create(cls, ignored_args: list = None, **kwargs):
        """
        Create the new model object and persist it.
        Execute possible pre/post method calls for audit and others
        """
        if not ignored_args:
            ignored_args = ["id", "date_created", "last_updated"]

        obj = cls.model_class()

        return cls._handle_insert(obj, ignored_args, **kwargs)

    @classmethod
    def _update(cls, obj_id: int, ignored_args: list = None, **kwargs):
        """
        Update an existing model by obj_id and persist it. Execute
        """

        obj = cls.model_class.query.get(obj_id)

        if not obj:
            raise ObjectNotFoundException(cls.model_class, obj_id)

        obj = cls.db.session.merge(obj)
        if not ignored_args:
            ignored_args = ["id", "date_created", "last_updated"]

        return cls._handle_insert(obj, ignored_args, **kwargs)

    @classmethod
    def _update_by_ids(cls, obj_ids: list, ignored_args: list = [], **kwargs):
        """
        Execute bulk update on a group of objects selected by their ids
        """

        data = utils.clean_kwargs(ignored_args, kwargs)
        data = utils.remove_invalid_attributes(cls.model_class(), data)

        try:
            res = cls.model_class.query.filter(cls.model_class.id.in_(obj_ids)).update(
                data, synchronize_session=False
            )
            cls.db.session.commit()
            return res
        except Exception as e:
            cls.db.session.rollback()
            raise e

    @classmethod
    def _get(cls, obj_id: int):
        """
        Simple query method to get an object by obj_id
        """
        obj = cls.model_class.query.get(obj_id)

        if not obj:
            raise ObjectNotFoundException(cls.model_class, obj_id)

        return obj

    @classmethod
    def _delete(cls, obj_id: int):
        """
        delete an object for the existing model by obj_id
        """

        obj = cls.model_class.query.get(obj_id)
        obj = cls.db.session.merge(obj)

        if not obj:
            raise ObjectNotFoundException(cls.model_class, obj_id)

        cls.db.session.delete(obj)
        try:
            cls.db.session.commit()
            return True
        except Exception:
            cls.db.session.rollback()
            raise

    @classmethod
    def _get_by_ids(cls, ids: list = None):
        """
        Retrieve an array of objects specified by the ids
        """
        if not ids:
            ids = []

        objects = cls.model_class.query.filter(cls.model_class.id.in_(ids))

        return objects

    @classmethod
    def _delete_by_ids(cls, ids: list = None):
        """
        Delete an array of objects specified by ids
        """
        if not ids:
            ids = []
        for obj in cls.model_class.query.filter(cls.model_class.id.in_(ids)):
            cls.db.session.delete(obj)
            try:
                cls.db.session.commit()
            except Exception:
                cls.db.session.rollback()
                raise
        return True
