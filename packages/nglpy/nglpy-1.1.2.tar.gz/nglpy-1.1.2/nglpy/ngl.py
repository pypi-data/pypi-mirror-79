# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ngl')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ngl')
    _ngl = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ngl', [dirname(__file__)])
        except ImportError:
            import _ngl
            return _ngl
        try:
            _mod = imp.load_module('_ngl', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ngl = swig_import_helper()
    del swig_import_helper
else:
    import _ngl
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ngl.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _ngl.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ngl.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ngl.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ngl.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ngl.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ngl.SwigPyIterator_copy(self)

    def next(self):
        return _ngl.SwigPyIterator_next(self)

    def __next__(self):
        return _ngl.SwigPyIterator___next__(self)

    def previous(self):
        return _ngl.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ngl.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ngl.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ngl.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ngl.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ngl.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ngl.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ngl.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _ngl.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class nglGraph(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nglGraph, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nglGraph, name)
    __repr__ = _swig_repr

    def __init__(self, Xin, rows, cols, graph, maxN, beta, edgeIndices, connect=False):
        this = _ngl.new_nglGraph(Xin, rows, cols, graph, maxN, beta, edgeIndices, connect)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dimension(self):
        return _ngl.nglGraph_dimension(self)

    def size(self):
        return _ngl.nglGraph_size(self)

    def max(self, dim):
        return _ngl.nglGraph_max(self, dim)

    def min(self, dim):
        return _ngl.nglGraph_min(self, dim)

    def range(self, dim):
        return _ngl.nglGraph_range(self, dim)

    def get_x(self, *args):
        return _ngl.nglGraph_get_x(self, *args)

    def full_graph(self):
        return _ngl.nglGraph_full_graph(self)

    def get_neighbors(self, index):
        return _ngl.nglGraph_get_neighbors(self, index)
    __swig_destroy__ = _ngl.delete_nglGraph
    __del__ = lambda self: None
nglGraph_swigregister = _ngl.nglGraph_swigregister
nglGraph_swigregister(nglGraph)

class vectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _ngl.vectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ngl.vectorDouble___nonzero__(self)

    def __bool__(self):
        return _ngl.vectorDouble___bool__(self)

    def __len__(self):
        return _ngl.vectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _ngl.vectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ngl.vectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ngl.vectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ngl.vectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ngl.vectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ngl.vectorDouble___setitem__(self, *args)

    def pop(self):
        return _ngl.vectorDouble_pop(self)

    def append(self, x):
        return _ngl.vectorDouble_append(self, x)

    def empty(self):
        return _ngl.vectorDouble_empty(self)

    def size(self):
        return _ngl.vectorDouble_size(self)

    def swap(self, v):
        return _ngl.vectorDouble_swap(self, v)

    def begin(self):
        return _ngl.vectorDouble_begin(self)

    def end(self):
        return _ngl.vectorDouble_end(self)

    def rbegin(self):
        return _ngl.vectorDouble_rbegin(self)

    def rend(self):
        return _ngl.vectorDouble_rend(self)

    def clear(self):
        return _ngl.vectorDouble_clear(self)

    def get_allocator(self):
        return _ngl.vectorDouble_get_allocator(self)

    def pop_back(self):
        return _ngl.vectorDouble_pop_back(self)

    def erase(self, *args):
        return _ngl.vectorDouble_erase(self, *args)

    def __init__(self, *args):
        this = _ngl.new_vectorDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _ngl.vectorDouble_push_back(self, x)

    def front(self):
        return _ngl.vectorDouble_front(self)

    def back(self):
        return _ngl.vectorDouble_back(self)

    def assign(self, n, x):
        return _ngl.vectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _ngl.vectorDouble_resize(self, *args)

    def insert(self, *args):
        return _ngl.vectorDouble_insert(self, *args)

    def reserve(self, n):
        return _ngl.vectorDouble_reserve(self, n)

    def capacity(self):
        return _ngl.vectorDouble_capacity(self)
    __swig_destroy__ = _ngl.delete_vectorDouble
    __del__ = lambda self: None
vectorDouble_swigregister = _ngl.vectorDouble_swigregister
vectorDouble_swigregister(vectorDouble)

class vectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _ngl.vectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ngl.vectorInt___nonzero__(self)

    def __bool__(self):
        return _ngl.vectorInt___bool__(self)

    def __len__(self):
        return _ngl.vectorInt___len__(self)

    def __getslice__(self, i, j):
        return _ngl.vectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ngl.vectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ngl.vectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ngl.vectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ngl.vectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ngl.vectorInt___setitem__(self, *args)

    def pop(self):
        return _ngl.vectorInt_pop(self)

    def append(self, x):
        return _ngl.vectorInt_append(self, x)

    def empty(self):
        return _ngl.vectorInt_empty(self)

    def size(self):
        return _ngl.vectorInt_size(self)

    def swap(self, v):
        return _ngl.vectorInt_swap(self, v)

    def begin(self):
        return _ngl.vectorInt_begin(self)

    def end(self):
        return _ngl.vectorInt_end(self)

    def rbegin(self):
        return _ngl.vectorInt_rbegin(self)

    def rend(self):
        return _ngl.vectorInt_rend(self)

    def clear(self):
        return _ngl.vectorInt_clear(self)

    def get_allocator(self):
        return _ngl.vectorInt_get_allocator(self)

    def pop_back(self):
        return _ngl.vectorInt_pop_back(self)

    def erase(self, *args):
        return _ngl.vectorInt_erase(self, *args)

    def __init__(self, *args):
        this = _ngl.new_vectorInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _ngl.vectorInt_push_back(self, x)

    def front(self):
        return _ngl.vectorInt_front(self)

    def back(self):
        return _ngl.vectorInt_back(self)

    def assign(self, n, x):
        return _ngl.vectorInt_assign(self, n, x)

    def resize(self, *args):
        return _ngl.vectorInt_resize(self, *args)

    def insert(self, *args):
        return _ngl.vectorInt_insert(self, *args)

    def reserve(self, n):
        return _ngl.vectorInt_reserve(self, n)

    def capacity(self):
        return _ngl.vectorInt_capacity(self)
    __swig_destroy__ = _ngl.delete_vectorInt
    __del__ = lambda self: None
vectorInt_swigregister = _ngl.vectorInt_swigregister
vectorInt_swigregister(vectorInt)

class setInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, setInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, setInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _ngl.setInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ngl.setInt___nonzero__(self)

    def __bool__(self):
        return _ngl.setInt___bool__(self)

    def __len__(self):
        return _ngl.setInt___len__(self)

    def append(self, x):
        return _ngl.setInt_append(self, x)

    def __contains__(self, x):
        return _ngl.setInt___contains__(self, x)

    def __getitem__(self, i):
        return _ngl.setInt___getitem__(self, i)

    def add(self, x):
        return _ngl.setInt_add(self, x)

    def discard(self, x):
        return _ngl.setInt_discard(self, x)

    def __init__(self, *args):
        this = _ngl.new_setInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _ngl.setInt_empty(self)

    def size(self):
        return _ngl.setInt_size(self)

    def clear(self):
        return _ngl.setInt_clear(self)

    def swap(self, v):
        return _ngl.setInt_swap(self, v)

    def count(self, x):
        return _ngl.setInt_count(self, x)

    def begin(self):
        return _ngl.setInt_begin(self)

    def end(self):
        return _ngl.setInt_end(self)

    def rbegin(self):
        return _ngl.setInt_rbegin(self)

    def rend(self):
        return _ngl.setInt_rend(self)

    def erase(self, *args):
        return _ngl.setInt_erase(self, *args)

    def find(self, x):
        return _ngl.setInt_find(self, x)

    def lower_bound(self, x):
        return _ngl.setInt_lower_bound(self, x)

    def upper_bound(self, x):
        return _ngl.setInt_upper_bound(self, x)

    def equal_range(self, x):
        return _ngl.setInt_equal_range(self, x)

    def insert(self, __x):
        return _ngl.setInt_insert(self, __x)
    __swig_destroy__ = _ngl.delete_setInt
    __del__ = lambda self: None
setInt_swigregister = _ngl.setInt_swigregister
setInt_swigregister(setInt)

class mapIntSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mapIntSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mapIntSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _ngl.mapIntSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ngl.mapIntSet___nonzero__(self)

    def __bool__(self):
        return _ngl.mapIntSet___bool__(self)

    def __len__(self):
        return _ngl.mapIntSet___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _ngl.mapIntSet___getitem__(self, key)

    def __delitem__(self, key):
        return _ngl.mapIntSet___delitem__(self, key)

    def has_key(self, key):
        return _ngl.mapIntSet_has_key(self, key)

    def keys(self):
        return _ngl.mapIntSet_keys(self)

    def values(self):
        return _ngl.mapIntSet_values(self)

    def items(self):
        return _ngl.mapIntSet_items(self)

    def __contains__(self, key):
        return _ngl.mapIntSet___contains__(self, key)

    def key_iterator(self):
        return _ngl.mapIntSet_key_iterator(self)

    def value_iterator(self):
        return _ngl.mapIntSet_value_iterator(self)

    def __setitem__(self, *args):
        return _ngl.mapIntSet___setitem__(self, *args)

    def asdict(self):
        return _ngl.mapIntSet_asdict(self)

    def __init__(self, *args):
        this = _ngl.new_mapIntSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _ngl.mapIntSet_empty(self)

    def size(self):
        return _ngl.mapIntSet_size(self)

    def swap(self, v):
        return _ngl.mapIntSet_swap(self, v)

    def begin(self):
        return _ngl.mapIntSet_begin(self)

    def end(self):
        return _ngl.mapIntSet_end(self)

    def rbegin(self):
        return _ngl.mapIntSet_rbegin(self)

    def rend(self):
        return _ngl.mapIntSet_rend(self)

    def clear(self):
        return _ngl.mapIntSet_clear(self)

    def get_allocator(self):
        return _ngl.mapIntSet_get_allocator(self)

    def count(self, x):
        return _ngl.mapIntSet_count(self, x)

    def erase(self, *args):
        return _ngl.mapIntSet_erase(self, *args)

    def find(self, x):
        return _ngl.mapIntSet_find(self, x)

    def lower_bound(self, x):
        return _ngl.mapIntSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _ngl.mapIntSet_upper_bound(self, x)
    __swig_destroy__ = _ngl.delete_mapIntSet
    __del__ = lambda self: None
mapIntSet_swigregister = _ngl.mapIntSet_swigregister
mapIntSet_swigregister(mapIntSet)

# This file is compatible with both classic and new-style classes.


