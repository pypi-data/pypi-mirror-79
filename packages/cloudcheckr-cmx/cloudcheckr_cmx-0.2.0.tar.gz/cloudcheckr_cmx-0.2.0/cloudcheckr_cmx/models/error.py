# coding: utf-8

"""
    CloudCheckr API

    CloudCheckr API  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@cloudcheckr.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Error(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'http_status_code': 'int',
        'code': 'str',
        'message': 'str',
        'target': 'str',
        'details': 'list[Error]',
        'inner_error': 'object',
        'correlation_id': 'str',
        'developer_info': 'DeveloperInfo'
    }

    attribute_map = {
        'http_status_code': 'httpStatusCode',
        'code': 'code',
        'message': 'message',
        'target': 'target',
        'details': 'details',
        'inner_error': 'innerError',
        'correlation_id': 'correlationId',
        'developer_info': 'developerInfo'
    }

    def __init__(self, http_status_code=None, code=None, message=None, target=None, details=None, inner_error=None, correlation_id=None, developer_info=None):  # noqa: E501
        """Error - a model defined in Swagger"""  # noqa: E501
        self._http_status_code = None
        self._code = None
        self._message = None
        self._target = None
        self._details = None
        self._inner_error = None
        self._correlation_id = None
        self._developer_info = None
        self.discriminator = None
        if http_status_code is not None:
            self.http_status_code = http_status_code
        if code is not None:
            self.code = code
        if message is not None:
            self.message = message
        if target is not None:
            self.target = target
        if details is not None:
            self.details = details
        if inner_error is not None:
            self.inner_error = inner_error
        if correlation_id is not None:
            self.correlation_id = correlation_id
        if developer_info is not None:
            self.developer_info = developer_info

    @property
    def http_status_code(self):
        """Gets the http_status_code of this Error.  # noqa: E501


        :return: The http_status_code of this Error.  # noqa: E501
        :rtype: int
        """
        return self._http_status_code

    @http_status_code.setter
    def http_status_code(self, http_status_code):
        """Sets the http_status_code of this Error.


        :param http_status_code: The http_status_code of this Error.  # noqa: E501
        :type: int
        """

        self._http_status_code = http_status_code

    @property
    def code(self):
        """Gets the code of this Error.  # noqa: E501


        :return: The code of this Error.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Error.


        :param code: The code of this Error.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def message(self):
        """Gets the message of this Error.  # noqa: E501


        :return: The message of this Error.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Error.


        :param message: The message of this Error.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def target(self):
        """Gets the target of this Error.  # noqa: E501


        :return: The target of this Error.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this Error.


        :param target: The target of this Error.  # noqa: E501
        :type: str
        """

        self._target = target

    @property
    def details(self):
        """Gets the details of this Error.  # noqa: E501


        :return: The details of this Error.  # noqa: E501
        :rtype: list[Error]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Error.


        :param details: The details of this Error.  # noqa: E501
        :type: list[Error]
        """

        self._details = details

    @property
    def inner_error(self):
        """Gets the inner_error of this Error.  # noqa: E501


        :return: The inner_error of this Error.  # noqa: E501
        :rtype: object
        """
        return self._inner_error

    @inner_error.setter
    def inner_error(self, inner_error):
        """Sets the inner_error of this Error.


        :param inner_error: The inner_error of this Error.  # noqa: E501
        :type: object
        """

        self._inner_error = inner_error

    @property
    def correlation_id(self):
        """Gets the correlation_id of this Error.  # noqa: E501


        :return: The correlation_id of this Error.  # noqa: E501
        :rtype: str
        """
        return self._correlation_id

    @correlation_id.setter
    def correlation_id(self, correlation_id):
        """Sets the correlation_id of this Error.


        :param correlation_id: The correlation_id of this Error.  # noqa: E501
        :type: str
        """

        self._correlation_id = correlation_id

    @property
    def developer_info(self):
        """Gets the developer_info of this Error.  # noqa: E501


        :return: The developer_info of this Error.  # noqa: E501
        :rtype: DeveloperInfo
        """
        return self._developer_info

    @developer_info.setter
    def developer_info(self, developer_info):
        """Sets the developer_info of this Error.


        :param developer_info: The developer_info of this Error.  # noqa: E501
        :type: DeveloperInfo
        """

        self._developer_info = developer_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Error, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Error):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
