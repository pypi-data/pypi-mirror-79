# coding: utf-8

"""
    CloudCheckr API

    CloudCheckr API  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@cloudcheckr.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomerResponseModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'email': 'str',
        'parent_id': 'str',
        'signup_type': 'str',
        'deleted': 'datetime',
        'disabled_date': 'datetime',
        'disabled': 'bool',
        'saas_customer_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'email': 'email',
        'parent_id': 'parentId',
        'signup_type': 'signupType',
        'deleted': 'deleted',
        'disabled_date': 'disabledDate',
        'disabled': 'disabled',
        'saas_customer_id': 'saasCustomerId'
    }

    def __init__(self, id=None, name=None, email=None, parent_id=None, signup_type=None, deleted=None, disabled_date=None, disabled=None, saas_customer_id=None):  # noqa: E501
        """CustomerResponseModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._email = None
        self._parent_id = None
        self._signup_type = None
        self._deleted = None
        self._disabled_date = None
        self._disabled = None
        self._saas_customer_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if email is not None:
            self.email = email
        if parent_id is not None:
            self.parent_id = parent_id
        if signup_type is not None:
            self.signup_type = signup_type
        if deleted is not None:
            self.deleted = deleted
        if disabled_date is not None:
            self.disabled_date = disabled_date
        if disabled is not None:
            self.disabled = disabled
        if saas_customer_id is not None:
            self.saas_customer_id = saas_customer_id

    @property
    def id(self):
        """Gets the id of this CustomerResponseModel.  # noqa: E501

        The customer's ID. This property supports: filtering.  # noqa: E501

        :return: The id of this CustomerResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomerResponseModel.

        The customer's ID. This property supports: filtering.  # noqa: E501

        :param id: The id of this CustomerResponseModel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CustomerResponseModel.  # noqa: E501

        The customer's name. This property supports: sorting and filtering.  # noqa: E501

        :return: The name of this CustomerResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomerResponseModel.

        The customer's name. This property supports: sorting and filtering.  # noqa: E501

        :param name: The name of this CustomerResponseModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def email(self):
        """Gets the email of this CustomerResponseModel.  # noqa: E501

        The customer's email. This property supports: sorting and filtering.  # noqa: E501

        :return: The email of this CustomerResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CustomerResponseModel.

        The customer's email. This property supports: sorting and filtering.  # noqa: E501

        :param email: The email of this CustomerResponseModel.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def parent_id(self):
        """Gets the parent_id of this CustomerResponseModel.  # noqa: E501

        The customer's parent ID if there is an L1/L2 relationship. This property supports: filtering.  # noqa: E501

        :return: The parent_id of this CustomerResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this CustomerResponseModel.

        The customer's parent ID if there is an L1/L2 relationship. This property supports: filtering.  # noqa: E501

        :param parent_id: The parent_id of this CustomerResponseModel.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def signup_type(self):
        """Gets the signup_type of this CustomerResponseModel.  # noqa: E501

        The customer's signup type. This property supports: sorting.  # noqa: E501

        :return: The signup_type of this CustomerResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._signup_type

    @signup_type.setter
    def signup_type(self, signup_type):
        """Sets the signup_type of this CustomerResponseModel.

        The customer's signup type. This property supports: sorting.  # noqa: E501

        :param signup_type: The signup_type of this CustomerResponseModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["Standard", "AwsMarketplace", "TackleAws", "TackleAzure"]  # noqa: E501
        if signup_type not in allowed_values:
            raise ValueError(
                "Invalid value for `signup_type` ({0}), must be one of {1}"  # noqa: E501
                .format(signup_type, allowed_values)
            )

        self._signup_type = signup_type

    @property
    def deleted(self):
        """Gets the deleted of this CustomerResponseModel.  # noqa: E501

        The date that the customer was deleted.  # noqa: E501

        :return: The deleted of this CustomerResponseModel.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this CustomerResponseModel.

        The date that the customer was deleted.  # noqa: E501

        :param deleted: The deleted of this CustomerResponseModel.  # noqa: E501
        :type: datetime
        """

        self._deleted = deleted

    @property
    def disabled_date(self):
        """Gets the disabled_date of this CustomerResponseModel.  # noqa: E501

        The date that the customer was disabled.  # noqa: E501

        :return: The disabled_date of this CustomerResponseModel.  # noqa: E501
        :rtype: datetime
        """
        return self._disabled_date

    @disabled_date.setter
    def disabled_date(self, disabled_date):
        """Sets the disabled_date of this CustomerResponseModel.

        The date that the customer was disabled.  # noqa: E501

        :param disabled_date: The disabled_date of this CustomerResponseModel.  # noqa: E501
        :type: datetime
        """

        self._disabled_date = disabled_date

    @property
    def disabled(self):
        """Gets the disabled of this CustomerResponseModel.  # noqa: E501

        Determines if the customer is disabled.  # noqa: E501

        :return: The disabled of this CustomerResponseModel.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this CustomerResponseModel.

        Determines if the customer is disabled.  # noqa: E501

        :param disabled: The disabled of this CustomerResponseModel.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def saas_customer_id(self):
        """Gets the saas_customer_id of this CustomerResponseModel.  # noqa: E501

        The customer's external Saas ID. This property supports: sorting.  # noqa: E501

        :return: The saas_customer_id of this CustomerResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._saas_customer_id

    @saas_customer_id.setter
    def saas_customer_id(self, saas_customer_id):
        """Sets the saas_customer_id of this CustomerResponseModel.

        The customer's external Saas ID. This property supports: sorting.  # noqa: E501

        :param saas_customer_id: The saas_customer_id of this CustomerResponseModel.  # noqa: E501
        :type: str
        """

        self._saas_customer_id = saas_customer_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerResponseModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerResponseModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
