# coding: utf-8

"""
    CloudCheckr API

    CloudCheckr API  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@cloudcheckr.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RoleRequestModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'permission_sets': 'list[BasicRequestListModification]',
        'customer_account_access_rule': 'str',
        'customer_accounts': 'list[CustomerAccountModification]'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'permission_sets': 'permissionSets',
        'customer_account_access_rule': 'customerAccountAccessRule',
        'customer_accounts': 'customerAccounts'
    }

    def __init__(self, name=None, description=None, permission_sets=None, customer_account_access_rule=None, customer_accounts=None):  # noqa: E501
        """RoleRequestModel - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._permission_sets = None
        self._customer_account_access_rule = None
        self._customer_accounts = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if permission_sets is not None:
            self.permission_sets = permission_sets
        if customer_account_access_rule is not None:
            self.customer_account_access_rule = customer_account_access_rule
        if customer_accounts is not None:
            self.customer_accounts = customer_accounts

    @property
    def name(self):
        """Gets the name of this RoleRequestModel.  # noqa: E501

        The role's name.  # noqa: E501

        :return: The name of this RoleRequestModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RoleRequestModel.

        The role's name.  # noqa: E501

        :param name: The name of this RoleRequestModel.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this RoleRequestModel.  # noqa: E501

        The role's description. This property supports: resetting.  # noqa: E501

        :return: The description of this RoleRequestModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RoleRequestModel.

        The role's description. This property supports: resetting.  # noqa: E501

        :param description: The description of this RoleRequestModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def permission_sets(self):
        """Gets the permission_sets of this RoleRequestModel.  # noqa: E501

        The role's permission sets. This property supports: resetting.  # noqa: E501

        :return: The permission_sets of this RoleRequestModel.  # noqa: E501
        :rtype: list[BasicRequestListModification]
        """
        return self._permission_sets

    @permission_sets.setter
    def permission_sets(self, permission_sets):
        """Sets the permission_sets of this RoleRequestModel.

        The role's permission sets. This property supports: resetting.  # noqa: E501

        :param permission_sets: The permission_sets of this RoleRequestModel.  # noqa: E501
        :type: list[BasicRequestListModification]
        """

        self._permission_sets = permission_sets

    @property
    def customer_account_access_rule(self):
        """Gets the customer_account_access_rule of this RoleRequestModel.  # noqa: E501

        The role's access rule. This controls how customer and account access is determined.  # noqa: E501

        :return: The customer_account_access_rule of this RoleRequestModel.  # noqa: E501
        :rtype: str
        """
        return self._customer_account_access_rule

    @customer_account_access_rule.setter
    def customer_account_access_rule(self, customer_account_access_rule):
        """Sets the customer_account_access_rule of this RoleRequestModel.

        The role's access rule. This controls how customer and account access is determined.  # noqa: E501

        :param customer_account_access_rule: The customer_account_access_rule of this RoleRequestModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["SpecifiedCustomersAndAccountsOnly", "OwnCustomerAndAllAccounts"]  # noqa: E501
        if customer_account_access_rule not in allowed_values:
            raise ValueError(
                "Invalid value for `customer_account_access_rule` ({0}), must be one of {1}"  # noqa: E501
                .format(customer_account_access_rule, allowed_values)
            )

        self._customer_account_access_rule = customer_account_access_rule

    @property
    def customer_accounts(self):
        """Gets the customer_accounts of this RoleRequestModel.  # noqa: E501

        The customers and/or accounts to which the role grants access. This property supports: resetting.  # noqa: E501

        :return: The customer_accounts of this RoleRequestModel.  # noqa: E501
        :rtype: list[CustomerAccountModification]
        """
        return self._customer_accounts

    @customer_accounts.setter
    def customer_accounts(self, customer_accounts):
        """Sets the customer_accounts of this RoleRequestModel.

        The customers and/or accounts to which the role grants access. This property supports: resetting.  # noqa: E501

        :param customer_accounts: The customer_accounts of this RoleRequestModel.  # noqa: E501
        :type: list[CustomerAccountModification]
        """

        self._customer_accounts = customer_accounts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoleRequestModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoleRequestModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
