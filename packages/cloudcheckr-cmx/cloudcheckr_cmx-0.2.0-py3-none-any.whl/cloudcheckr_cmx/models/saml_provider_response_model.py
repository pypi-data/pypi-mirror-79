# coding: utf-8

"""
    CloudCheckr API

    CloudCheckr API  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@cloudcheckr.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SamlProviderResponseModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'default_role': 'str',
        'saml_issuer': 'str',
        'permitted_child_customers': 'list[PermittedChildCustomerModel]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'default_role': 'defaultRole',
        'saml_issuer': 'samlIssuer',
        'permitted_child_customers': 'permittedChildCustomers'
    }

    def __init__(self, id=None, name=None, default_role=None, saml_issuer=None, permitted_child_customers=None):  # noqa: E501
        """SamlProviderResponseModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._default_role = None
        self._saml_issuer = None
        self._permitted_child_customers = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if default_role is not None:
            self.default_role = default_role
        if saml_issuer is not None:
            self.saml_issuer = saml_issuer
        if permitted_child_customers is not None:
            self.permitted_child_customers = permitted_child_customers

    @property
    def id(self):
        """Gets the id of this SamlProviderResponseModel.  # noqa: E501

        The SAML provider's ID.  # noqa: E501

        :return: The id of this SamlProviderResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SamlProviderResponseModel.

        The SAML provider's ID.  # noqa: E501

        :param id: The id of this SamlProviderResponseModel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SamlProviderResponseModel.  # noqa: E501

        The SAML provider's name. This property supports: filtering and sorting.  # noqa: E501

        :return: The name of this SamlProviderResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SamlProviderResponseModel.

        The SAML provider's name. This property supports: filtering and sorting.  # noqa: E501

        :param name: The name of this SamlProviderResponseModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def default_role(self):
        """Gets the default_role of this SamlProviderResponseModel.  # noqa: E501

        The SAML provider's default role. This property supports: filtering and sorting.  # noqa: E501

        :return: The default_role of this SamlProviderResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._default_role

    @default_role.setter
    def default_role(self, default_role):
        """Sets the default_role of this SamlProviderResponseModel.

        The SAML provider's default role. This property supports: filtering and sorting.  # noqa: E501

        :param default_role: The default_role of this SamlProviderResponseModel.  # noqa: E501
        :type: str
        """

        self._default_role = default_role

    @property
    def saml_issuer(self):
        """Gets the saml_issuer of this SamlProviderResponseModel.  # noqa: E501

        The SAML provider's issuer. This property supports: filtering and sorting.  # noqa: E501

        :return: The saml_issuer of this SamlProviderResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._saml_issuer

    @saml_issuer.setter
    def saml_issuer(self, saml_issuer):
        """Sets the saml_issuer of this SamlProviderResponseModel.

        The SAML provider's issuer. This property supports: filtering and sorting.  # noqa: E501

        :param saml_issuer: The saml_issuer of this SamlProviderResponseModel.  # noqa: E501
        :type: str
        """

        self._saml_issuer = saml_issuer

    @property
    def permitted_child_customers(self):
        """Gets the permitted_child_customers of this SamlProviderResponseModel.  # noqa: E501

        The L2 customers allowed to use this L1 SAML provider. This property supports: resetting.  # noqa: E501

        :return: The permitted_child_customers of this SamlProviderResponseModel.  # noqa: E501
        :rtype: list[PermittedChildCustomerModel]
        """
        return self._permitted_child_customers

    @permitted_child_customers.setter
    def permitted_child_customers(self, permitted_child_customers):
        """Sets the permitted_child_customers of this SamlProviderResponseModel.

        The L2 customers allowed to use this L1 SAML provider. This property supports: resetting.  # noqa: E501

        :param permitted_child_customers: The permitted_child_customers of this SamlProviderResponseModel.  # noqa: E501
        :type: list[PermittedChildCustomerModel]
        """

        self._permitted_child_customers = permitted_child_customers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SamlProviderResponseModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SamlProviderResponseModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
