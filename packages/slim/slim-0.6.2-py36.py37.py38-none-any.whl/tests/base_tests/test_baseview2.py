import base64
import logging
from unittest import mock

import pytest

from slim import Application
from slim.base.view import BaseView
from slim.tools.test import make_mocked_request, make_mocked_view

pytestmark = [pytest.mark.asyncio]


app = Application(cookies_secret=b'123456', permission=None, log_level=logging.DEBUG)
captcha = ''


@app.route.view('base_test')
class ATestView(BaseView):
    @app.route.interface('GET')
    async def captcha(self):
        self.finish_raw(base64.b64decode(captcha), 206, content_type='image/png')


async def test_get_captcha():
    request = make_mocked_request('GET', '/api/base_test')
    view = ATestView(app, request)
    await view._prepare()
    await view.captcha()
    assert view.ret_val == base64.b64decode(captcha)
    assert view.response.content_type == 'image/png'
    assert view.response.status == 206


@app.route.view('base')
class FinishTestView(BaseView):
    @app.route.get()
    async def test(self):
        self.finish_raw(b'body', 200)

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.aaa = 1

    def on_finish(self):
        self.aaa = 2


async def test_on_finish():
    req = make_mocked_request('GET', '/api/base/test')

    async def send(message):
        pass

    await app(req.scope, req.receive, send, raise_for_resp=True)
    view = app._last_view
    assert view.aaa == 2


app.prepare()
