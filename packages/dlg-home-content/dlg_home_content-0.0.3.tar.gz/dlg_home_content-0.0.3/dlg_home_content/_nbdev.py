# AUTOGENERATED BY NBDEV! DO NOT EDIT!

__all__ = ["index", "modules", "custom_doc_links", "git_url"]

index = {"DetectronTrain": "01_tv_detection.ipynb",
         "train_cli": "03_brand_classification.ipynb",
         "evaluation": "01_tv_detection.ipynb",
         "InferLogo": "01_tv_detection.ipynb",
         "DetectronInference": "01_tv_detection.ipynb",
         "encode_polygon": "10_image_generator.ipynb",
         "get_image": "10_image_generator.ipynb",
         "load_annotation_points": "02_perspective_correction.ipynb",
         "order_points": "02_perspective_correction.ipynb",
         "four_point_transform": "02_perspective_correction.ipynb",
         "get_perspective_transform": "02_perspective_correction.ipynb",
         "get_details": "02_perspective_correction.ipynb",
         "transform_points": "02_perspective_correction.ipynb",
         "check_boundaries": "02_perspective_correction.ipynb",
         "transform_keypoints": "02_perspective_correction.ipynb",
         "get_length_4_sides": "02_perspective_correction.ipynb",
         "Perspective_Transform": "02_perspective_correction.ipynb",
         "Classification": "03_brand_classification.ipynb",
         "read_content_labelme": "05_labelme2coco.ipynb",
         "visualize_polygons": "05_labelme2coco.ipynb",
         "labelme_visual": "05_labelme2coco.ipynb",
         "random_labelme_visual": "05_labelme2coco.ipynb",
         "labelme2coco": "05_labelme2coco.ipynb",
         "segmentation_mask": "10_image_generator.ipynb",
         "coco_random_annot_visual": "05_labelme2coco.ipynb",
         "get_coco_segmentation": "05_labelme2coco.ipynb",
         "get_concat_h": "05_labelme2coco.ipynb",
         "get_concat_v": "05_labelme2coco.ipynb",
         "draw_grid": "05_labelme2coco.ipynb",
         "keypoints_labelme_clean": "05_labelme2coco.ipynb",
         "process_parts": "05_labelme2coco.ipynb",
         "labelme2coco_cli": "05_labelme2coco.ipynb",
         "visualize_keypoints": "05_labelme2coco.ipynb",
         "load_json": "06_utils.ipynb",
         "load_yaml": "06_utils.ipynb",
         "xywh_to_xyxy": "06_utils.ipynb",
         "xyxy_to_xywh": "06_utils.ipynb",
         "replacenth": "06_utils.ipynb",
         "COCOeval": "07_cocoeval.ipynb",
         "Params": "07_cocoeval.ipynb",
         "KeypointInference": "08_inference.ipynb",
         "E2EInference": "09_e2e_pipeline.ipynb",
         "random_point_inside_rectangle": "10_image_generator.ipynb",
         "create_newpoints": "10_image_generator.ipynb",
         "img_b64_to_arr": "10_image_generator.ipynb",
         "mask_generator": "10_image_generator.ipynb",
         "blacked_out_image_except_mask": "10_image_generator.ipynb",
         "get_segment_crop": "10_image_generator.ipynb",
         "generate_new_image": "10_image_generator.ipynb",
         "create_newannotation": "10_image_generator.ipynb",
         "generate_synthetic_data": "10_image_generator.ipynb",
         "generate_results": "11_test_metrics_calculator.ipynb",
         "pre_rec_f1": "11_test_metrics_calculator.ipynb",
         "brand_confusion_matrix": "11_test_metrics_calculator.ipynb",
         "find_closest": "11_test_metrics_calculator.ipynb",
         "size_metrics": "11_test_metrics_calculator.ipynb",
         "screen_size": "12_utils_code.ipynb",
         "product_dicts": "12_utils_code.ipynb"}

modules = ["tv_detection.py",
           "perspective_correction.py",
           "tv_brand_classification.py",
           "labelme2coco.py",
           "utils.py",
           "cocoeval.py",
           "inference_pipeline.py",
           "e2e_inference.py",
           "image_generator.py",
           "test_metrics.py",
           "utils_parsing.py"]

doc_url = "//dlg_home_content"

git_url = "https://gitlab.com/fractal/dlg_home_content/tree/master/"

def custom_doc_links(name): return None
