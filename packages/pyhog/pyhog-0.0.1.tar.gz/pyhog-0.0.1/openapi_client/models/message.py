# coding: utf-8

"""
    MailHog API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Message(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        '_from': 'Path',
        'to': 'list[Path]',
        'headers': 'object',
        'size': 'float',
        'created': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        '_from': 'from',
        'to': 'to',
        'headers': 'headers',
        'size': 'size',
        'created': 'created'
    }

    def __init__(self, id=None, _from=None, to=None, headers=None, size=None, created=None, local_vars_configuration=None):  # noqa: E501
        """Message - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self.__from = None
        self._to = None
        self._headers = None
        self._size = None
        self._created = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if _from is not None:
            self._from = _from
        if to is not None:
            self.to = to
        if headers is not None:
            self.headers = headers
        if size is not None:
            self.size = size
        if created is not None:
            self.created = created

    @property
    def id(self):
        """Gets the id of this Message.  # noqa: E501


        :return: The id of this Message.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Message.


        :param id: The id of this Message.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def _from(self):
        """Gets the _from of this Message.  # noqa: E501


        :return: The _from of this Message.  # noqa: E501
        :rtype: Path
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this Message.


        :param _from: The _from of this Message.  # noqa: E501
        :type _from: Path
        """

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this Message.  # noqa: E501


        :return: The to of this Message.  # noqa: E501
        :rtype: list[Path]
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this Message.


        :param to: The to of this Message.  # noqa: E501
        :type to: list[Path]
        """

        self._to = to

    @property
    def headers(self):
        """Gets the headers of this Message.  # noqa: E501


        :return: The headers of this Message.  # noqa: E501
        :rtype: object
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this Message.


        :param headers: The headers of this Message.  # noqa: E501
        :type headers: object
        """

        self._headers = headers

    @property
    def size(self):
        """Gets the size of this Message.  # noqa: E501


        :return: The size of this Message.  # noqa: E501
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Message.


        :param size: The size of this Message.  # noqa: E501
        :type size: float
        """

        self._size = size

    @property
    def created(self):
        """Gets the created of this Message.  # noqa: E501


        :return: The created of this Message.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Message.


        :param created: The created of this Message.  # noqa: E501
        :type created: datetime
        """

        self._created = created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Message):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Message):
            return True

        return self.to_dict() != other.to_dict()
