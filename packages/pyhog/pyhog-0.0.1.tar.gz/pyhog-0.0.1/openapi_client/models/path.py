# coding: utf-8

"""
    MailHog API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Path(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'relays': 'list[str]',
        'mailbox': 'str',
        'domain': 'str',
        'params': 'str'
    }

    attribute_map = {
        'relays': 'relays',
        'mailbox': 'mailbox',
        'domain': 'domain',
        'params': 'params'
    }

    def __init__(self, relays=None, mailbox=None, domain=None, params=None, local_vars_configuration=None):  # noqa: E501
        """Path - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._relays = None
        self._mailbox = None
        self._domain = None
        self._params = None
        self.discriminator = None

        if relays is not None:
            self.relays = relays
        if mailbox is not None:
            self.mailbox = mailbox
        if domain is not None:
            self.domain = domain
        if params is not None:
            self.params = params

    @property
    def relays(self):
        """Gets the relays of this Path.  # noqa: E501


        :return: The relays of this Path.  # noqa: E501
        :rtype: list[str]
        """
        return self._relays

    @relays.setter
    def relays(self, relays):
        """Sets the relays of this Path.


        :param relays: The relays of this Path.  # noqa: E501
        :type relays: list[str]
        """

        self._relays = relays

    @property
    def mailbox(self):
        """Gets the mailbox of this Path.  # noqa: E501


        :return: The mailbox of this Path.  # noqa: E501
        :rtype: str
        """
        return self._mailbox

    @mailbox.setter
    def mailbox(self, mailbox):
        """Sets the mailbox of this Path.


        :param mailbox: The mailbox of this Path.  # noqa: E501
        :type mailbox: str
        """

        self._mailbox = mailbox

    @property
    def domain(self):
        """Gets the domain of this Path.  # noqa: E501


        :return: The domain of this Path.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Path.


        :param domain: The domain of this Path.  # noqa: E501
        :type domain: str
        """

        self._domain = domain

    @property
    def params(self):
        """Gets the params of this Path.  # noqa: E501


        :return: The params of this Path.  # noqa: E501
        :rtype: str
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this Path.


        :param params: The params of this Path.  # noqa: E501
        :type params: str
        """

        self._params = params

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Path):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Path):
            return True

        return self.to_dict() != other.to_dict()
