# coding: utf-8

"""
    Agilicus API

    Agilicus API endpoints  # noqa: E501

    The version of the OpenAPI document: 2020.09.15
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class AccessRequestsStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'email': 'str',
        'org_id': 'str',
        'user_status': 'UserStatusEnum',
        'user_requests': 'list[UserRequestInfo]'
    }

    attribute_map = {
        'email': 'email',
        'org_id': 'org_id',
        'user_status': 'user_status',
        'user_requests': 'user_requests'
    }

    def __init__(self, email=None, org_id=None, user_status=None, user_requests=None, local_vars_configuration=None):  # noqa: E501
        """AccessRequestsStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._email = None
        self._org_id = None
        self._user_status = None
        self._user_requests = None
        self.discriminator = None

        self.email = email
        if org_id is not None:
            self.org_id = org_id
        self.user_status = user_status
        self.user_requests = user_requests

    @property
    def email(self):
        """Gets the email of this AccessRequestsStatus.  # noqa: E501

        User's email address  # noqa: E501

        :return: The email of this AccessRequestsStatus.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AccessRequestsStatus.

        User's email address  # noqa: E501

        :param email: The email of this AccessRequestsStatus.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and email is None:  # noqa: E501
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                email is not None and len(email) > 100):
            raise ValueError("Invalid value for `email`, length must be less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                email is not None and len(email) < 0):
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `0`")  # noqa: E501

        self._email = email

    @property
    def org_id(self):
        """Gets the org_id of this AccessRequestsStatus.  # noqa: E501

        Unique identifier  # noqa: E501

        :return: The org_id of this AccessRequestsStatus.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this AccessRequestsStatus.

        Unique identifier  # noqa: E501

        :param org_id: The org_id of this AccessRequestsStatus.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def user_status(self):
        """Gets the user_status of this AccessRequestsStatus.  # noqa: E501


        :return: The user_status of this AccessRequestsStatus.  # noqa: E501
        :rtype: UserStatusEnum
        """
        return self._user_status

    @user_status.setter
    def user_status(self, user_status):
        """Sets the user_status of this AccessRequestsStatus.


        :param user_status: The user_status of this AccessRequestsStatus.  # noqa: E501
        :type: UserStatusEnum
        """
        if self.local_vars_configuration.client_side_validation and user_status is None:  # noqa: E501
            raise ValueError("Invalid value for `user_status`, must not be `None`")  # noqa: E501

        self._user_status = user_status

    @property
    def user_requests(self):
        """Gets the user_requests of this AccessRequestsStatus.  # noqa: E501

        The matching UserRequestInfo objects  # noqa: E501

        :return: The user_requests of this AccessRequestsStatus.  # noqa: E501
        :rtype: list[UserRequestInfo]
        """
        return self._user_requests

    @user_requests.setter
    def user_requests(self, user_requests):
        """Sets the user_requests of this AccessRequestsStatus.

        The matching UserRequestInfo objects  # noqa: E501

        :param user_requests: The user_requests of this AccessRequestsStatus.  # noqa: E501
        :type: list[UserRequestInfo]
        """
        if self.local_vars_configuration.client_side_validation and user_requests is None:  # noqa: E501
            raise ValueError("Invalid value for `user_requests`, must not be `None`")  # noqa: E501

        self._user_requests = user_requests

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessRequestsStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccessRequestsStatus):
            return True

        return self.to_dict() != other.to_dict()
